/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const os = require('os');

const ROOT_DIR = path.resolve(__dirname, '..');
const NODE_MODULES = path.join(ROOT_DIR, 'node_modules');
const PACKAGE_LOCK = path.join(ROOT_DIR, 'package-lock.json');
const BUILD_DIR = path.join(ROOT_DIR, 'build');
const CACHE_DIRS = [
    path.join(os.homedir(), '.npm'),
    path.join(ROOT_DIR, '.cache')
];

console.log('üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞...');

// –£–¥–∞–ª–µ–Ω–∏–µ node_modules
if (fs.existsSync(NODE_MODULES)) {
    console.log('üì¶ –£–¥–∞–ª–µ–Ω–∏–µ node_modules...');
    try {
        // –í Windows –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
        if (process.platform === 'win32') {
            execSync(`rmdir /s /q "${NODE_MODULES}"`, { stdio: 'ignore' });
        } else {
            fs.rmSync(NODE_MODULES, { recursive: true, force: true });
        }
        console.log('‚úÖ node_modules —É–¥–∞–ª–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ node_modules:', error.message);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ package-lock.json
if (fs.existsSync(PACKAGE_LOCK)) {
    console.log('üìÑ –£–¥–∞–ª–µ–Ω–∏–µ package-lock.json...');
    try {
        fs.unlinkSync(PACKAGE_LOCK);
        console.log('‚úÖ package-lock.json —É–¥–∞–ª–µ–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ package-lock.json:', error.message);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏
if (fs.existsSync(BUILD_DIR)) {
    console.log('üèóÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ build...');
    try {
        fs.rmSync(BUILD_DIR, { recursive: true, force: true });
        console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è build —É–¥–∞–ª–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ build:', error.message);
    }
}

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ npm (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
const clearCache = process.argv.includes('--clear-cache');
if (clearCache) {
    console.log('üßº –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ npm...');
    try {
        execSync('npm cache clean --force', { stdio: 'inherit' });
        console.log('‚úÖ –ö—ç—à npm –æ—á–∏—â–µ–Ω');

        // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—ç—à-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for (const cacheDir of CACHE_DIRS) {
            if (fs.existsSync(cacheDir)) {
                try {
                    fs.rmSync(cacheDir, { recursive: true, force: true });
                    console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${cacheDir} —É–¥–∞–ª–µ–Ω–∞`);
                } catch (innerError) {
                    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${cacheDir}:`, innerError.message);
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ npm:', error.message);
    }
}

console.log('');
console.log('üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('');
console.log('–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
console.log('');
console.log('    npm install --legacy-peer-deps');
console.log('');
console.log('–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
console.log('');
console.log('    install-deps.bat');
