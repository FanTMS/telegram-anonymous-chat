/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üßπ –ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...');

const foldersToRemove = [
    'node_modules/.cache',
    'build',
    '.netlify/build-cache',
];

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–æ–∫
foldersToRemove.forEach(folder => {
    const folderPath = path.join(__dirname, '..', folder);
    try {
        if (fs.existsSync(folderPath)) {
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ ${folder}...`);
            fs.rmSync(folderPath, { recursive: true, force: true });
        }
    } catch (error) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${folder}:`, error.message);
    }
});

// –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ npm
try {
    console.log('üßº –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ npm...');
    execSync('npm cache clean --force', { stdio: 'inherit' });
} catch (error) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à npm:', error.message);
}

console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
