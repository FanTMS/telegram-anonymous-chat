import React, { useState, useEffect } from 'react';
import AnimatedTransition from './AnimatedTransition';

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –∏–∫–æ–Ω–∫–∞–º–∏
const PREDEFINED_INTERESTS = [
    { id: 'music', name: '–ú—É–∑—ã–∫–∞', icon: 'üéµ' },
    { id: 'sports', name: '–°–ø–æ—Ä—Ç', icon: '‚öΩ' },
    { id: 'gaming', name: '–ò–≥—Ä—ã', icon: 'üéÆ' },
    { id: 'movies', name: '–ö–∏–Ω–æ', icon: 'üé¨' },
    { id: 'books', name: '–ö–Ω–∏–≥–∏', icon: 'üìö' },
    { id: 'travel', name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', icon: '‚úàÔ∏è' },
    { id: 'cooking', name: '–ö—É–ª–∏–Ω–∞—Ä–∏—è', icon: 'üç≥' },
    { id: 'art', name: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', icon: 'üé®' },
    { id: 'tech', name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', icon: 'üíª' },
    { id: 'science', name: '–ù–∞—É–∫–∞', icon: 'üî¨' },
    { id: 'nature', name: '–ü—Ä–∏—Ä–æ–¥–∞', icon: 'üåø' },
    { id: 'fitness', name: '–§–∏—Ç–Ω–µ—Å', icon: 'üí™' },
    { id: 'fashion', name: '–ú–æ–¥–∞', icon: 'üëó' },
    { id: 'pets', name: '–ü–∏—Ç–æ–º—Ü—ã', icon: 'üêæ' },
    { id: 'photography', name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', icon: 'üì∑' },
    { id: 'crypto', name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', icon: '‚Çø' },
    { id: 'dance', name: '–¢–∞–Ω—Ü—ã', icon: 'üíÉ' },
    { id: 'history', name: '–ò—Å—Ç–æ—Ä–∏—è', icon: 'üèõÔ∏è' },
    { id: 'psychology', name: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', icon: 'üß†' },
    { id: 'languages', name: '–Ø–∑—ã–∫–∏', icon: 'üó£Ô∏è' }
];

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
 */
const InterestSelector = ({
    value = [],
    onChange,
    maxSelections = 5,
    error,
    hint
}) => {
    const [selectedInterests, setSelectedInterests] = useState(value);
    const [isAnimating, setIsAnimating] = useState(false);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
    useEffect(() => {
        if (typeof onChange === 'function') {
            onChange(selectedInterests);
        }
    }, [selectedInterests, onChange]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞
    const handleInterestClick = (interest) => {
        setIsAnimating(true);
        setTimeout(() => setIsAnimating(false), 300);

        if (selectedInterests.includes(interest.id)) {
            // –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            setSelectedInterests(prev => prev.filter(id => id !== interest.id));
        } else if (selectedInterests.length < maxSelections) {
            // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
            setSelectedInterests(prev => [...prev, interest.id]);
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –ø–æ ID
    const getSelectedInterestsData = () => {
        return PREDEFINED_INTERESTS.filter(interest =>
            selectedInterests.includes(interest.id)
        );
    };

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
    const getInterestsString = () => {
        return getSelectedInterestsData()
            .map(interest => interest.name)
            .join(', ');
    };

    return (
        <div className="interest-selector-container">
            <div className="interest-selector-grid">
                {PREDEFINED_INTERESTS.map((interest) => {
                    const isSelected = selectedInterests.includes(interest.id);
                    return (
                        <div
                            key={interest.id}
                            className={`interest-item ${isSelected ? 'selected' : ''} ${isAnimating ? 'animating' : ''}`}
                            onClick={() => handleInterestClick(interest)}
                        >
                            <div className="interest-icon">{interest.icon}</div>
                            <div className="interest-name">{interest.name}</div>
                            {isSelected && <div className="interest-selected-mark">‚úì</div>}
                        </div>
                    );
                })}
            </div>

            {selectedInterests.length > 0 && (
                <div className="selected-interests-summary">
                    <p className="selected-interests-label">
                        –í—ã–±—Ä–∞–Ω–æ ({selectedInterests.length}/{maxSelections}):
                    </p>
                    <div className="selected-interests-tags">
                        {getSelectedInterestsData().map(interest => (
                            <div key={interest.id} className="selected-interest-tag">
                                <span className="interest-tag-icon">{interest.icon}</span>
                                <span className="interest-tag-name">{interest.name}</span>
                                <button
                                    type="button"
                                    className="interest-tag-remove"
                                    onClick={() => handleInterestClick(interest)}
                                >
                                    √ó
                                </button>
                            </div>
                        ))}
                    </div>
                    <input
                        type="hidden"
                        name="interests"
                        value={getInterestsString()}
                    />
                </div>
            )}

            {selectedInterests.length === 0 && (
                <p className="no-interests-selected">
                    –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
                </p>
            )}

            {error && (
                <AnimatedTransition animation="fadeIn" duration={300}>
                    <div className="interest-selector-error">{error}</div>
                </AnimatedTransition>
            )}

            {hint && !error && (
                <div className="interest-selector-hint">{hint}</div>
            )}
        </div>
    );
};

export default InterestSelector;
