import React, { useState, useEffect, useCallback, useRef } from 'react';
import WebApp from '@twa-dev/sdk';
import { isBrowser } from '../utils/browserUtils';
import { troubleshootCollection } from '../utils/firebaseUtils';
import '../styles/RegistrationForm.css';

// –ò–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
const INTERESTS = [
    { id: 'music', name: '–ú—É–∑—ã–∫–∞', icon: 'üéµ' },
    { id: 'movies', name: '–§–∏–ª—å–º—ã', icon: 'üé¨' },
    { id: 'travel', name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', icon: '‚úàÔ∏è' },
    { id: 'sports', name: '–°–ø–æ—Ä—Ç', icon: '‚öΩ' },
    { id: 'art', name: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', icon: 'üé®' },
    { id: 'gaming', name: '–ò–≥—Ä—ã', icon: 'üéÆ' },
    { id: 'cooking', name: '–ì–æ—Ç–æ–≤–∫–∞', icon: 'üç≥' },
    { id: 'literature', name: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', icon: 'üìö' },
    { id: 'technology', name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', icon: 'üíª' },
    { id: 'fashion', name: '–ú–æ–¥–∞', icon: 'üëó' },
    { id: 'science', name: '–ù–∞—É–∫–∞', icon: 'üî¨' },
    { id: 'nature', name: '–ü—Ä–∏—Ä–æ–¥–∞', icon: 'üåø' },
    { id: 'photography', name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', icon: 'üì∏' },
    { id: 'business', name: '–ë–∏–∑–Ω–µ—Å', icon: 'üíº' },
    { id: 'health', name: '–ó–¥–æ—Ä–æ–≤—å–µ', icon: 'üßò‚Äç‚ôÇÔ∏è' },
    { id: 'language', name: '–Ø–∑—ã–∫–∏', icon: 'üó£Ô∏è' },
    { id: 'dance', name: '–¢–∞–Ω—Ü—ã', icon: 'üíÉ' },
    { id: 'astrology', name: '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è', icon: '‚ú®' },
];

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
const generateNickname = () => {
    const adjectives = [
        '–í–µ—Å—ë–ª—ã–π', '–£–º–Ω—ã–π', '–î–æ–±—Ä—ã–π', '–ú–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π', '–ó–∞–≥–∞–¥–æ—á–Ω—ã–π',
        '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π', '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π', '–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π', '–ó–∞–¥—É–º—á–∏–≤—ã–π', '–í–æ–ª—à–µ–±–Ω—ã–π'
    ];

    const nouns = [
        '–°—Ç—Ä–∞–Ω–Ω–∏–∫', '–ú—ã—Å–ª–∏—Ç–µ–ª—å', '–•—É–¥–æ–∂–Ω–∏–∫', '–ò—Å–∫–∞—Ç–µ–ª—å', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫',
        '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–ú–µ—á—Ç–∞—Ç–µ–ª—å', '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å', '–¢–≤–æ—Ä–µ—Ü', '–§–∏–ª–æ—Å–æ—Ñ'
    ];

    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];
    const noun = nouns[Math.floor(Math.random() * nouns.length)];

    return `${adjective}_${noun}${Math.floor(Math.random() * 999)}`;
};

const RegistrationForm = ({ onSubmit, telegramUser = null, isDevelopment = false }) => {
    const [currentStep, setCurrentStep] = useState(0);
    const [formData, setFormData] = useState({
        name: '',
        age: '',
        selectedInterests: [],
        aboutMe: ''
    });
    const [errors, setErrors] = useState({});
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [showSuccess, setShowSuccess] = useState(false);

    // Refs –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    const nameInputRef = useRef(null);
    const ageInputRef = useRef(null);
    const aboutMeInputRef = useRef(null);

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —à–∞–≥–æ–≤
    const totalSteps = 3;
    const isFirstStep = currentStep === 0;
    const isLastStep = currentStep === totalSteps - 1;

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    const goToNextStep = () => {
        if (currentStep < totalSteps - 1) {
            setCurrentStep(prev => prev + 1);
        }
    };

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    const goToPreviousStep = () => {
        if (currentStep > 0) {
            setCurrentStep(prev => prev - 1);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
        // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if (errors[name]) {
            setErrors(prev => ({ ...prev, [name]: undefined }));
        }
    };

    // –î–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –≤–≤–æ–¥–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    const handleAgeInput = (e) => {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏
        const value = e.target.value.replace(/\D/g, '');

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∑–Ω–∞—á–µ–Ω–∏—è
        const limitedValue = value.slice(0, 3);

        setFormData(prev => ({
            ...prev,
            age: limitedValue
        }));

        // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if (errors.age) {
            setErrors(prev => ({ ...prev, age: undefined }));
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    const handleInterestsChange = (interestId) => {
        setFormData(prev => {
            const newSelectedInterests = [...prev.selectedInterests];

            if (newSelectedInterests.includes(interestId)) {
                return {
                    ...prev,
                    selectedInterests: newSelectedInterests.filter(id => id !== interestId)
                };
            } else {
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
                if (newSelectedInterests.length < 5) {
                    return {
                        ...prev,
                        selectedInterests: [...newSelectedInterests, interestId]
                    };
                }
            }
            return prev;
        });

        // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if (errors.interests) {
            setErrors(prev => ({ ...prev, interests: undefined }));
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    const getStepHint = () => {
        switch (currentStep) {
            case 0:
                return '–ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞';
            case 1:
                return '–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ –≤–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 17 –ª–µ—Ç';
            case 2:
                return '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤';
            default:
                return '';
        }
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    const validateStep = useCallback((step) => {
        const newErrors = {};

        switch (step) {
            case 0:
                // –ò–º—è –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
                break;
            case 1:
                if (!formData.age) {
                    newErrors.age = '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç';
                } else if (isNaN(parseInt(formData.age))) {
                    newErrors.age = '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º';
                } else if (parseInt(formData.age) < 17) {
                    newErrors.age = '–í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 17 –ª–µ—Ç';
                } else if (parseInt(formData.age) > 100) {
                    newErrors.age = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–¥–æ 100 –ª–µ—Ç)';
                }
                break;
            case 2:
                if (!formData.selectedInterests || formData.selectedInterests.length === 0) {
                    newErrors.interests = '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å';
                }
                break;
            default:
                break;
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    }, [formData]);

    // –ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    const enhancedHandleSubmit = useCallback(async () => {
        try {
            console.log("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            const validationErrors = validateStep(currentStep);
            if (Object.keys(validationErrors).length > 0) {
                setErrors(validationErrors);
                console.log("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", validationErrors);
                return;
            }

            setIsSubmitting(true);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã
            try {
                const collectionStatus = await troubleshootCollection('users');
                console.log("–°—Ç–∞—Ç—É—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users:", collectionStatus);
            } catch (collectionError) {
                console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", collectionError);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const registrationLock = localStorage.getItem('registration_in_progress');
            if (registrationLock) {
                const lockTime = parseInt(registrationLock);
                const now = Date.now();

                if (now - lockTime < 30000) {
                    console.log("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)");
                    return;
                } else {
                    localStorage.removeItem('registration_in_progress');
                }
            }

            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            localStorage.setItem('registration_in_progress', Date.now().toString());

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
            let userData = { ...formData };

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
            if (!userData.name?.trim()) {
                userData.nickname = generateNickname();
                console.log("–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º:", userData.nickname);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
            userData.age = parseInt(userData.age);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            if (formData.selectedInterests && formData.selectedInterests.length > 0) {
                const interestNames = formData.selectedInterests.map((interestId) => {
                    const interest = INTERESTS.find((i) => i.id === interestId);
                    return interest?.name;
                }).filter(Boolean);

                userData.interests = interestNames.join(', ');
            }

            console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã:", userData);
            await onSubmit(userData);

            localStorage.removeItem('registration_in_progress');
            console.log("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            try {
                if (isBrowser() && WebApp && WebApp.HapticFeedback && WebApp.HapticFeedback.notificationOccurred) {
                    WebApp.HapticFeedback.notificationOccurred('success');
                }

                if (isBrowser() && WebApp && WebApp.showPopup) {
                    WebApp.showPopup({
                        title: '–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
                        message: '–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                        buttons: [{ text: "–ù–∞—á–∞—Ç—å" }]
                    });
                }
            } catch (popupError) {
                console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", popupError);
            }

            setShowSuccess(true);

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:", error);
            setErrors((prev) => ({
                ...prev,
                submit: error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            }));
            localStorage.removeItem('registration_in_progress');
        } finally {
            setIsSubmitting(false);
        }
    }, [formData, currentStep, validateStep, onSubmit]);

    const handleSubmit = () => {
        enhancedHandleSubmit();
    };

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–æ–π Telegram WebApp
    useEffect(() => {
        if (isDevelopment || !isBrowser() || !WebApp.isSupported) return;

        try {
            if (isLastStep) {
                WebApp.MainButton.setText('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
                WebApp.MainButton.onClick(handleSubmit);
            } else {
                WebApp.MainButton.setText('–î–∞–ª–µ–µ');
                WebApp.MainButton.onClick(() => {
                    if (validateStep(currentStep)) {
                        goToNextStep();
                    }
                });
            }
            WebApp.MainButton.show();

            return () => {
                if (isLastStep) {
                    WebApp.MainButton.offClick(handleSubmit);
                } else {
                    WebApp.MainButton.offClick(() => {
                        if (validateStep(currentStep)) {
                            goToNextStep();
                        }
                    });
                }
            };
        } catch (error) {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É Telegram:", error);
        }
    }, [currentStep, isDevelopment, isLastStep, handleSubmit, validateStep]);

    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º –ø–æ–ª–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —à–∞–≥–∞
    useEffect(() => {
        setTimeout(() => {
            if (currentStep === 0 && nameInputRef.current) {
                nameInputRef.current.focus();
            } else if (currentStep === 1 && ageInputRef.current) {
                ageInputRef.current.focus();
            }
        }, 300);
    }, [currentStep]);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
    if (errors.submit) {
        return (
            <div className="registration-error">
                <div className="error-icon">‚ùå</div>
                <h2 className="error-title">–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h2>
                <p className="error-message">{errors.submit}</p>
                <button
                    className="retry-button"
                    onClick={() => setErrors(prev => ({ ...prev, submit: undefined }))}
                >
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        );
    }

    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —à–∞–≥–∞
    const StepIndicator = ({ step, label, isCurrent, isComplete }) => {
        const classes = ['step-indicator'];
        if (isCurrent) classes.push('active');
        if (isComplete) classes.push('completed');

        return (
            <div className="step-wrapper">
                <div className={classes.join(' ')}>
                    {isComplete ? (
                        <span className="step-check">‚úì</span>
                    ) : (
                        <span className="step-number">{step + 1}</span>
                    )}
                </div>
                <span className="step-label">{label}</span>
            </div>
        );
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —à–∞–≥–æ–≤
    const getStepClass = (stepIndex) => {
        if (stepIndex === currentStep) return 'form-step active';
        if (stepIndex < currentStep) return 'form-step previous';
        return 'form-step';
    };

    // –ï—Å–ª–∏ –∏–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if (isSubmitting) {
        return (
            <div className="registration-container">
                <div className="loading-spinner"></div>
                <p className="loading-text">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...</p>
            </div>
        );
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ª–∏–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressWidth = `${((currentStep + 1) / totalSteps) * 100}%`;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    const renderNavigationButtons = () => {
        return (
            <div className="form-navigation">
                {currentStep > 0 && (
                    <button
                        type="button"
                        className="nav-button back-button"
                        onClick={goToPreviousStep}
                        disabled={isSubmitting}
                    >
                        <span>‚Üê</span>
                        <span className="button-text">–ù–∞–∑–∞–¥</span>
                    </button>
                )}

                {currentStep < totalSteps - 1 && (
                    <button
                        type="button"
                        className="nav-button next-button"
                        onClick={goToNextStep}
                        disabled={isSubmitting}
                    >
                        <span className="button-text">–î–∞–ª–µ–µ</span>
                        <span>‚Üí</span>
                    </button>
                )}
            </div>
        );
    };

    return (
        <div className="registration-container">
            <div className="form-header">
                <h1 className="form-title">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>
            </div>

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —à–∞–≥–æ–≤ */}
            <div className="form-progress">
                <div className="progress-line" style={{ width: progressWidth }}></div>
                <StepIndicator
                    step={0}
                    label="–ò–º—è"
                    isCurrent={currentStep === 0}
                    isComplete={currentStep > 0}
                />
                <StepIndicator
                    step={1}
                    label="–í–æ–∑—Ä–∞—Å—Ç"
                    isCurrent={currentStep === 1}
                    isComplete={currentStep > 1}
                />
                <StepIndicator
                    step={2}
                    label="–ò–Ω—Ç–µ—Ä–µ—Å—ã"
                    isCurrent={currentStep === 2}
                    isComplete={false}
                />
            </div>

            {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —à–∞–≥–æ–≤ —Ñ–æ—Ä–º—ã */}
            <div className="form-step-container">
                {/* –®–∞–≥ 1: –ò–º—è */}
                <div className={getStepClass(0)}>
                    <h2 className="form-title">–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</h2>

                    {telegramUser && (
                        <div className="telegram-user-info">
                            <div className="user-avatar">
                                {telegramUser.photoUrl ? (
                                    <img src={telegramUser.photoUrl} alt="avatar" />
                                ) : (
                                    telegramUser.firstName?.charAt(0)
                                )}
                            </div>
                            <div className="user-details">
                                <div className="user-name">
                                    {telegramUser.firstName} {telegramUser.lastName}
                                </div>
                                <div className="user-id">@{telegramUser.username || 'user'}</div>
                            </div>
                        </div>
                    )}

                    <div className="form-field">
                        <div className="input-field with-icon">
                            <input
                                id="name"
                                name="name"
                                value={formData.name}
                                onChange={handleChange}
                                ref={nameInputRef}
                                placeholder=" "
                                autoComplete="off"
                            />
                            <label htmlFor="name">–ò–º—è –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º</label>
                            <div className="input-icon">üë§</div>
                            {errors.name && <div className="input-error">{errors.name}</div>}
                            <div className="input-hint show">{getStepHint()}</div>
                        </div>
                    </div>

                    {renderNavigationButtons()}
                </div>

                {/* –®–∞–≥ 2: –í–æ–∑—Ä–∞—Å—Ç */}
                <div className={getStepClass(1)}>
                    <h2 className="form-title">–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?</h2>

                    <div className="form-field">
                        <div className="input-field with-icon">
                            <input
                                id="age"
                                name="age"
                                type="number"
                                value={formData.age}
                                onChange={handleAgeInput}
                                ref={ageInputRef}
                                placeholder="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 17 –ª–µ—Ç)"
                                min="17"
                                max="100"
                                className={errors.age ? "error" : ""}
                                autoComplete="off"
                            />
                            <label htmlFor="age">–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç</label>
                            <div className="input-icon">üóìÔ∏è</div>
                            {errors.age && <div className="input-error">{errors.age}</div>}
                            <div className="input-hint show">{getStepHint()}</div>
                        </div>
                    </div>

                    {renderNavigationButtons()}
                </div>

                {/* –®–∞–≥ 3: –ò–Ω—Ç–µ—Ä–µ—Å—ã */}
                <div className={getStepClass(2)}>
                    <h2 className="form-title">–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã</h2>

                    <div className="form-field">
                        <div className="input-hint show">{getStepHint()}</div>
                        <div className="interests-grid">
                            {INTERESTS.map((interest) => (
                                <div
                                    key={interest.id}
                                    className={`interest-item ${formData.selectedInterests.includes(interest.id) ? 'selected' : ''}`}
                                    onClick={() => handleInterestsChange(interest.id)}
                                >
                                    <div className="interest-icon">{interest.icon}</div>
                                    <div className="interest-name">{interest.name}</div>
                                    <div className="interest-select-indicator">‚úì</div>
                                </div>
                            ))}
                        </div>
                        {errors.interests && <div className="input-error">{errors.interests}</div>}
                        <div className="input-hint show">
                            –í—ã–±—Ä–∞–Ω–æ: {formData.selectedInterests.length} / 5
                        </div>
                    </div>

                    <div className="input-field">
                        <textarea
                            id="aboutMe"
                            name="aboutMe"
                            value={formData.aboutMe}
                            onChange={handleChange}
                            ref={aboutMeInputRef}
                            rows={3}
                            placeholder=" "
                        ></textarea>
                        <label htmlFor="aboutMe">–û —Å–µ–±–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                        {errors.aboutMe && <div className="input-error">{errors.aboutMe}</div>}
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é" */}
                    <button
                        type="button"
                        className="complete-registration-button"
                        onClick={enhancedHandleSubmit}
                        disabled={isSubmitting}
                    >
                        {isSubmitting ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'}
                    </button>

                    {renderNavigationButtons()}
                </div>
            </div>
        </div>
    );
};

export default RegistrationForm;