import { initializeApp, getApps, getApp } from 'firebase/app';
import {
    getFirestore,
    initializeFirestore,
    enableIndexedDbPersistence,
    CACHE_SIZE_UNLIMITED,
    connectFirestoreEmulator
} from 'firebase/firestore';
import { getAuth } from 'firebase/auth';
import { getStorage } from 'firebase/storage';
import { firebaseConfig, validateFirebaseConfig } from './firebase-config';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
if (!validateFirebaseConfig(firebaseConfig)) {
    console.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firebase –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
let app;
try {
    if (getApps().length === 0) {
        console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase —Å –ø—Ä–æ–µ–∫—Ç–æ–º:", firebaseConfig.projectId);
        app = initializeApp(firebaseConfig);
    } else {
        console.log("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä Firebase");
        app = getApp();
    }
} catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", error);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firestore —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const db = initializeFirestore(app, {
    cacheSizeBytes: CACHE_SIZE_UNLIMITED,
    ignoreUndefinedProperties: true
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const auth = getAuth(app);
const storage = getStorage(app);

// –í–∫–ª—é—á–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω-–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è Firestore
try {
    enableIndexedDbPersistence(db)
        .then(() => {
            console.log("‚úÖ Firestore –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞");
        })
        .catch((err) => {
            if (err.code === 'failed-precondition') {
                console.warn('‚ö†Ô∏è –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∫–ª–∞–¥–æ–∫)');
            } else if (err.code === 'unimplemented') {
                console.warn('‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å');
            } else {
                console.error("‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏:", err);
            }
        });
} catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Firestore:", e);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —ç–º—É–ª—è—Ç–æ—Ä—É
if (process.env.NODE_ENV === 'development' && process.env.REACT_APP_USE_FIREBASE_EMULATOR === 'true') {
    try {
        const host = process.env.REACT_APP_FIREBASE_EMULATOR_HOST || 'localhost';
        const port = parseInt(process.env.REACT_APP_FIREBASE_EMULATOR_PORT || '8080', 10);
        console.log(`üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —ç–º—É–ª—è—Ç–æ—Ä—É Firestore: ${host}:${port}`);
        connectFirestoreEmulator(db, host, port);
    } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —ç–º—É–ª—è—Ç–æ—Ä—É:", e);
    }
}

export { app, db, auth, storage };
