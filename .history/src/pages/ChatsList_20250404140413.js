import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { getUserChats } from '../utils/chatService';
import { safeHapticFeedback, safeShowPopup } from '../utils/telegramWebAppUtils';
import '../styles/ChatsList.css';

const ChatsList = ({ user }) => {
    const [chats, setChats] = useState([]);
    const [filteredChats, setFilteredChats] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);
    const [searchQuery, setSearchQuery] = useState('');
    const [refreshing, setRefreshing] = useState(false);
    const [lastRefreshed, setLastRefreshed] = useState(new Date());
    const navigate = useNavigate();
    const searchInputRef = useRef(null);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    const loadChats = useCallback(async (showLoadingIndicator = true) => {
        if (!user || !user.telegramId) return;

        try {
            if (showLoadingIndicator) setIsLoading(true);
            setError(null);

            const userChats = await getUserChats(user.telegramId);
            setChats(userChats);
            setFilteredChats(userChats);
            setLastRefreshed(new Date());
            setIsLoading(false);
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤:", err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            setIsLoading(false);
        }
    }, [user]);

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    useEffect(() => {
        loadChats();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        const interval = setInterval(() => {
            loadChats(false);
        }, 60000);

        return () => clearInterval(interval);
    }, [loadChats]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ pull-to-refresh
    const handleRefresh = async () => {
        if (refreshing) return;

        setRefreshing(true);
        
        // –í–∏–±—Ä–∞—Ü–∏—è
        safeHapticFeedback('impact', 'light');

        try {
            await loadChats(false);
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            safeShowPopup({
                title: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
                message: '–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω',
                buttons: [{ text: "–û–ö" }]
            });
            
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", err);
        } finally {
            setRefreshing(false);
        }
    };

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —á–∞—Ç—É
    const goToChat = (chatId) => {
        // –í–∏–±—Ä–∞—Ü–∏—è
        safeHapticFeedback('selection');
        navigate(`/chat/${chatId}`);
    };

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∏—Å–∫—É –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    const findNewChat = () => {
        // –í–∏–±—Ä–∞—Ü–∏—è
        safeHapticFeedback('impact', 'medium');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        sessionStorage.setItem('redirectedFromChats', 'true');
        navigate('/random-chat');
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    const handleSearch = (e) => {
        const query = e.target.value.toLowerCase();
        setSearchQuery(query);
        
        if (!query.trim()) {
            setFilteredChats(chats);
            return;
        }
        
        const filtered = chats.filter(chat => {
            const lastMessageText = chat.lastMessage?.text?.toLowerCase() || '';
            return lastMessageText.includes(query);
        });
        
        setFilteredChats(filtered);
    };

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    const clearSearch = () => {
        setSearchQuery('');
        setFilteredChats(chats);
        if (searchInputRef.current) {
            searchInputRef.current.focus();
        }
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const formatLastMessageTime = (timestamp) => {
        if (!timestamp) return '';

        const date = new Date(timestamp);
        const now = new Date();
        const diff = now - date;
        
        // –ú–µ–Ω—å—à–µ –¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
        if (diff < 24 * 60 * 60 * 1000) {
            return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }
        
        // –ú–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if (diff < 7 * 24 * 60 * 60 * 1000) {
            const days = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
            return days[date.getDay()];
        }
        
        // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É
        return date.toLocaleDateString([], { day: 'numeric', month: 'numeric' });
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
    const getInitials = (chatId) => {
        if (!chatId) return '??';
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–∏–º–≤–æ–ª–∞ –∏–∑ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞ –∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        return chatId.toString().substring(0, 2).toUpperCase();
    };

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    const renderChatsList = () => {
        if (filteredChats.length === 0 && searchQuery) {
            return (
                <div className="empty-list-message">
                    <div>–ü–æ –∑–∞–ø—Ä–æ—Å—É "{searchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
                </div>
            );
        }

        return filteredChats.map((chat) => {
            const isUnread = chat.unreadCount > 0;
            
            return (
                <div
                    key={chat.id}
                    className="chat-item"
                    onClick={() => goToChat(chat.id)}
                >
                    <div className={`chat-avatar ${chat.isOnline ? 'online' : ''}`}>
                        {getInitials(chat.partnerId)}
                    </div>
                    <div className="chat-details">
                        <div className="chat-name-time">
                            <h3 className="chat-name">–°–æ–±–µ—Å–µ–¥–Ω–∏–∫</h3>
                            {chat.lastMessage && (
                                <span className="last-message-time">
                                    {formatLastMessageTime(chat.lastMessage.timestamp)}
                                </span>
                            )}
                        </div>
                        <p className={`last-message ${isUnread ? 'unread' : ''}`}>
                            {chat.lastMessage
                                ? chat.lastMessage.text
                                : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}
                        </p>
                    </div>
                    {isUnread && (
                        <div className="unread-badge">
                            {chat.unreadCount}
                        </div>
                    )}
                </div>
            );
        });
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const formatLastRefreshed = () => {
        return lastRefreshed.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    };

    if (isLoading) {
        return (
            <div className="chats-list-container">
                <h2 className="chats-list-title">–í–∞—à–∏ —á–∞—Ç—ã</h2>
                <div className="chats-loading">
                    <div className="chats-loading-indicator"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="chats-list-container">
                <h2 className="chats-list-title">–í–∞—à–∏ —á–∞—Ç—ã</h2>
                <div className="chats-error">
                    <div className="chats-error-icon">‚ö†Ô∏è</div>
                    <p>{error}</p>
                    <button onClick={() => loadChats()}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                </div>
            </div>
        );
    }

    return (
        <div className="chats-list-container">
            <div className="chats-list-header">
                <h2 className="chats-list-title">–í–∞—à–∏ —á–∞—Ç—ã</h2>
                {refreshing && (
                    <div className="pull-to-refresh">
                        <div className="pull-to-refresh-spinner"></div>
                        <span>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</span>
                    </div>
                )}
            </div>

            {chats.length > 3 && (
                <div className="search-bar">
                    <span className="search-icon">üîç</span>
                    <input
                        type="text"
                        className="search-input"
                        placeholder="–ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º..."
                        value={searchQuery}
                        onChange={handleSearch}
                        ref={searchInputRef}
                    />
                    {searchQuery && (
                        <button className="search-clear" onClick={clearSearch}>
                            ‚úï
                        </button>
                    )}
                </div>
            )}

            {chats.length === 0 ? (
                <div className="no-chats">
                    <div className="no-chats-icon">üí¨</div>
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</p>
                    <button
                        className="find-new-chat-button"
                        onClick={findNewChat}
                    >
                        –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                    </button>
                </div>
            ) : (
                <>
                    <div className="chats-list">
                        {renderChatsList()}
                    </div>

                    <div className="new-chat-section">
                        <button
                            className="find-new-chat-button"
                            onClick={findNewChat}
                        >
                            –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                        </button>
                    </div>
                </>
            )}

            <div className="floating-action-button" onClick={findNewChat}></div>
        </div>
    );
};

export default ChatsList;
