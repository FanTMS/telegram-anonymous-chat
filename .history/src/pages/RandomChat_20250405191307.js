import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { findRandomChat, cancelSearch, checkChatMatchStatus } from '../utils/chatService';
import { useTelegram } from '../hooks/useTelegram';
import '../styles/RandomChat.css';

const RandomChat = () => {
    const [user, setUser] = useState(null);
    const [isSearching, setIsSearching] = useState(false);
    const [searchTime, setSearchTime] = useState(0);
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(false);
    const [foundMatch, setFoundMatch] = useState(false);

    const navigate = useNavigate();
    const { safeHapticFeedback, safeShowPopup } = useTelegram();

    const timeIntervalRef = useRef(null);
    const searchIntervalRef = useRef(null);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        const savedUserId = localStorage.getItem('current_user_id');
        const savedUserData = localStorage.getItem('current_user');

        if (savedUserId && savedUserData) {
            try {
                const parsedUser = JSON.parse(savedUserData);
                setUser({
                    id: savedUserId,
                    ...parsedUser
                });
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e);
                setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            }
        } else {
            setError("–î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è");
        }
    }, []);

    // –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    const startSearch = useCallback(async () => {
        try {
            if (!user || !user.id) {
                setError("–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞");
                return;
            }

            setLoading(true);
            setIsSearching(true);
            setError(null);

            // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
            safeHapticFeedback('impact', 'light');

            const chatId = await findRandomChat(user.id);

            if (chatId) {
                // –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω —Å—Ä–∞–∑—É
                setFoundMatch(true);

                // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
                safeHapticFeedback('success');

                setTimeout(() => {
                    navigate(`/chat/${chatId}`);
                }, 2000);
            }

            setLoading(false);
        } catch (err) {
            setLoading(false);
            setIsSearching(false);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if (err.code === "permission-denied") {
                console.log("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " + err.message);
            } else if (err.message && typeof err.message === 'string') {
                setError(`–û—à–∏–±–∫–∞: ${err.message}`);
            } else {
                setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }

            // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            safeHapticFeedback('notification', null, 'error');
        }
    }, [user, navigate, safeHapticFeedback, safeShowPopup]);

    // –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞
    const stopSearch = useCallback(async () => {
        try {
            if (!user || !user.id) return;

            setLoading(true);
            await cancelSearch(user.id);
            setIsSearching(false);
            setSearchTime(0);
            setLoading(false);

            // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            safeHapticFeedback('impact', 'medium');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞
            await safeShowPopup({
                title: '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω',
                message: '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.',
                buttons: [{ text: "OK" }]
            });
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–∏—Å–∫–∞:", err);
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            setLoading(false);
        }
    }, [user, safeHapticFeedback, safeShowPopup]);

    // –°—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    useEffect(() => {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        if (timeIntervalRef.current) {
            clearInterval(timeIntervalRef.current);
        }
        if (searchIntervalRef.current) {
            clearInterval(searchIntervalRef.current);
        }

        // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞
        if (isSearching) {
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞
            timeIntervalRef.current = setInterval(() => {
                setSearchTime(prev => prev + 1);
            }, 1000);

            // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞
            searchIntervalRef.current = setInterval(async () => {
                if (!user || !user.id) return;

                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫
                    const chatMatch = await checkChatMatchStatus(user.id);

                    if (chatMatch) {
                        // –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!
                        setIsSearching(false);
                        setFoundMatch(true);
                        clearInterval(timeIntervalRef.current);
                        clearInterval(searchIntervalRef.current);

                        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
                        safeHapticFeedback('success');

                        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ —á–∞—Ç
                        setTimeout(() => {
                            navigate(`/chat/${chatMatch.id}`);
                        }, 2000);
                    }
                } catch (err) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞:", err);
                }
            }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        }

        return () => {
            clearInterval(timeIntervalRef.current);
            clearInterval(searchIntervalRef.current);
        };
    }, [isSearching, user, navigate, safeHapticFeedback]);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞
    const formatSearchTime = () => {
        const minutes = Math.floor(searchTime / 60);
        const seconds = searchTime % 60;
        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    };

    return (
        <div className="random-chat-container">
            <h2 className="random-chat-title">–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</h2>

            {error && <div className="error-message">{error}</div>}

            {loading ? (
                <div className="search-skeleton"></div>
            ) : (
                <div className="search-status">
                    {isSearching ? (
                        <>
                            <div className="search-animation">
                                <div className="search-pulse"></div>
                            </div>
                            <p className="search-text">–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...</p>
                            <p className="search-time">{formatSearchTime()}</p>
                            <button
                                className="action-button cancel-button"
                                onClick={stopSearch}
                                disabled={loading}
                            >
                                –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫
                            </button>
                        </>
                    ) : (
                        <button
                            className="action-button search-button"
                            onClick={startSearch}
                            disabled={loading}
                        >
                            –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                        </button>
                    )}
                </div>
            )}

            <div className="search-tips">
                <h3>–°–æ–≤–µ—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è</h3>
                <ul>
                    <li>–ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É</li>
                    <li>–ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</li>
                    <li>–ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è</li>
                </ul>
                <div className="tips-footer">
                    –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—é–¥–µ–π —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞
                </div>
            </div>

            {/* –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ */}
            {foundMatch && (
                <div className="found-match-animation">
                    <div className="found-match-content">
                        <div className="found-match-icon">üéâ</div>
                        <h3 className="found-match-title">–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!</h3>
                        <p className="found-match-subtitle">–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç...</p>
                    </div>
                </div>
            )}
        </div>
    );
};

export default RandomChat;
