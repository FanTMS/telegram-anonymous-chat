import React, { useState, useEffect, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { getUserSupportRequests, createSupportRequest } from '../utils/supportService';
import { UserContext } from '../contexts/UserContext';
import WebApp from '@twa-dev/sdk';
import { safeHapticFeedback, safeShowPopup } from '../utils/telegramWebAppUtils';
import '../styles/UserSupport.css';

const UserSupport = () => {
    const navigate = useNavigate();
    const { user } = useContext(UserContext);
    const [requests, setRequests] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [showNewRequestModal, setShowNewRequestModal] = useState(false);
    const [newRequestText, setNewRequestText] = useState('');
    const [submitting, setSubmitting] = useState(false);
    const [activeRequest, setActiveRequest] = useState(null);

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram WebApp
    useEffect(() => {
        try {
            if (WebApp.isExpanded !== undefined) {
                WebApp.BackButton.show();
                WebApp.BackButton.onClick(() => navigate(-1));
            }

            return () => {
                if (WebApp.isExpanded !== undefined) {
                    WebApp.BackButton.offClick(() => navigate(-1));
                    WebApp.BackButton.hide();
                }
            };
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥":', error);
        }
    }, [navigate]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        const loadRequests = async () => {
            if (!user) return;

            try {
                setLoading(true);
                setError(null);

                // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                let userId = user.telegramId || user.id;

                if (!userId) {
                    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ sessionStorage –∏–ª–∏ localStorage
                    try {
                        const userDataStr = sessionStorage.getItem('userData');
                        if (userDataStr) {
                            const userData = JSON.parse(userDataStr);
                            userId = userData.telegramId;
                        }

                        if (!userId) {
                            userId = localStorage.getItem('current_user_id');
                        }
                    } catch (e) {
                        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', e);
                    }
                }

                if (!userId) {
                    setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                    setLoading(false);
                    return;
                }

                const userRequests = await getUserSupportRequests(userId);
                setRequests(userRequests || []);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            } finally {
                setLoading(false);
            }
        };

        loadRequests();
    }, [user]);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const handleNewRequest = async () => {
        if (!newRequestText.trim()) return;

        try {
            setSubmitting(true);

            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            let userId = user?.telegramId || user?.id;

            if (!userId) {
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ sessionStorage –∏–ª–∏ localStorage
                try {
                    const userDataStr = sessionStorage.getItem('userData');
                    if (userDataStr) {
                        const userData = JSON.parse(userDataStr);
                        userId = userData.telegramId;
                    }

                    if (!userId) {
                        userId = localStorage.getItem('current_user_id');
                    }
                } catch (e) {
                    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', e);
                }
            }

            if (!userId) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }

            await createSupportRequest(newRequestText);

            // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            safeHapticFeedback('notification', null, 'success');

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await safeShowPopup({
                title: '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                message: '–í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
                buttons: [{ text: 'OK' }]
            });

            setNewRequestText('');
            setShowNewRequestModal(false);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            const userRequests = await getUserSupportRequests(userId);
            setRequests(userRequests || []);

            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            setTimeout(() => {
                safeShowPopup({
                    title: '–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
                    message: '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤ —á–∞—Ç–µ. –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç?',
                    buttons: [
                        { text: '–î–∞', id: 'go_to_chat' },
                        { text: '–ù–µ—Ç' }
                    ]
                }).then((buttonId) => {
                    if (buttonId === 'go_to_chat') {
                        navigate('/chats');
                    }
                });
            }, 1000);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await safeShowPopup({
                title: '–û—à–∏–±–∫–∞',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                buttons: [{ text: 'OK' }]
            });
        } finally {
            setSubmitting(false);
        }
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞
    const openRequestDetails = (request) => {
        safeHapticFeedback('selection');
        setActiveRequest(request);
    };

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞
    const closeRequestDetails = () => {
        setActiveRequest(null);
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const formatDate = (date) => {
        if (!date) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        return new Date(date).toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
    const getStatusColor = (status) => {
        switch (status) {
            case 'new': return '#ff9800';
            case 'processing': return '#2196f3';
            case 'resolved': return '#4caf50';
            case 'rejected': return '#f44336';
            default: return '#999999';
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
    const getStatusText = (status) => {
        switch (status) {
            case 'new': return '–ù–æ–≤—ã–π';
            case 'processing': return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
            case 'resolved': return '–†–µ—à–µ–Ω';
            case 'rejected': return '–û—Ç–∫–ª–æ–Ω–µ–Ω';
            default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    };

    return (
        <div className="user-support-container">
            <div className="user-support-header">
                <h1>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</h1>
                <button
                    className="new-request-button"
                    onClick={() => setShowNewRequestModal(true)}
                >
                    –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                </button>
            </div>

            {error && (
                <div className="user-support-error">
                    {error}
                </div>
            )}

            {loading ? (
                <div className="user-support-loading">
                    <div className="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...</p>
                </div>
            ) : (
                <>
                    {requests.length === 0 ? (
                        <div className="user-support-empty">
                            <div className="empty-icon">üì©</div>
                            <h2>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</h2>
                            <p>–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞.</p>
                            <button
                                className="empty-new-request-button"
                                onClick={() => setShowNewRequestModal(true)}
                            >
                                –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å
                            </button>
                        </div>
                    ) : (
                        <div className="requests-list">
                            {requests.map((request) => (
                                <div
                                    key={request.id}
                                    className="request-item"
                                    onClick={() => openRequestDetails(request)}
                                >
                                    <div className="request-header">
                                        <div className="request-date">
                                            {formatDate(request.createdAt)}
                                        </div>
                                        <div
                                            className="request-status"
                                            style={{ backgroundColor: getStatusColor(request.status) }}
                                        >
                                            {getStatusText(request.status)}
                                        </div>
                                    </div>
                                    <div className="request-message">
                                        {request.message.length > 120
                                            ? `${request.message.substring(0, 120)}...`
                                            : request.message}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ */}
            {showNewRequestModal && (
                <div className="modal-overlay" onClick={() => setShowNewRequestModal(false)}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <h2>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</h2>
                            <button
                                className="modal-close"
                                onClick={() => setShowNewRequestModal(false)}
                            >
                                √ó
                            </button>
                        </div>
                        <div className="modal-body">
                            <p>–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, –∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.</p>
                            <textarea
                                value={newRequestText}
                                onChange={(e) => setNewRequestText(e.target.value)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                                rows={6}
                            />
                        </div>
                        <div className="modal-footer">
                            <button
                                className="modal-cancel"
                                onClick={() => setShowNewRequestModal(false)}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                            <button
                                className="modal-submit"
                                onClick={handleNewRequest}
                                disabled={submitting || !newRequestText.trim()}
                            >
                                {submitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞ */}
            {activeRequest && (
                <div className="modal-overlay" onClick={closeRequestDetails}>
                    <div className="modal-content request-details" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <h2>–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞</h2>
                            <button className="modal-close" onClick={closeRequestDetails}>√ó</button>
                        </div>
                        <div className="modal-body">
                            <div className="request-detail-item">
                                <span className="detail-label">–°—Ç–∞—Ç—É—Å:</span>
                                <span
                                    className="detail-status"
                                    style={{ backgroundColor: getStatusColor(activeRequest.status) }}
                                >
                                    {getStatusText(activeRequest.status)}
                                </span>
                            </div>
                            <div className="request-detail-item">
                                <span className="detail-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                                <span className="detail-value">{formatDate(activeRequest.createdAt)}</span>
                            </div>
                            <div className="request-message-content">
                                <h3>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</h3>
                                <div className="message-text">{activeRequest.message}</div>
                            </div>

                            {activeRequest.response && (
                                <div className="request-response">
                                    <h3>–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</h3>
                                    <div className="response-text">{activeRequest.response}</div>
                                    <div className="response-date">
                                        –ü–æ–ª—É—á–µ–Ω: {formatDate(activeRequest.updatedAt)}
                                    </div>
                                </div>
                            )}

                            {activeRequest.status === 'new' && (
                                <div className="request-waiting">
                                    <p>–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.</p>
                                </div>
                            )}

                            {activeRequest.status === 'processing' && (
                                <div className="request-processing">
                                    <p>–í–∞—à –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</p>
                                </div>
                            )}

                            {activeRequest.status === 'rejected' && !activeRequest.response && (
                                <div className="request-rejected">
                                    <p>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.</p>
                                </div>
                            )}
                        </div>
                        <div className="modal-footer">
                            <button className="modal-close-btn" onClick={closeRequestDetails}>
                                –ó–∞–∫—Ä—ã—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default UserSupport;
