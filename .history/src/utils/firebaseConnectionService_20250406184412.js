import { db } from '../firebase';
import { doc, getDoc, setDoc, serverTimestamp, onSnapshot } from 'firebase/firestore';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Firebase
 */
class FirebaseConnectionService {
  constructor() {
    this.isConnected = navigator.onLine;
    this.listeners = [];
    this.unsubscribe = null;
    this.connectionRef = doc(db, "system", "connection_status");
    this.retryCount = 0;
    this.maxRetries = 5;
    this.retryInterval = null;
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è onLine —Å—Ç–∞—Ç—É—Å–∞
    this._setupNetworkListeners();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    this._setupConnectionMonitoring();
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Firebase
   */
  _setupConnectionMonitoring() {
    try {
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      setDoc(this.connectionRef, {
        lastOnline: serverTimestamp(),
        clientInfo: {
          userAgent: navigator.userAgent,
          language: navigator.language,
          platform: navigator.platform
        }
      }, { merge: true })
      .then(() => {
        console.log("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Firebase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
        this._updateConnectionStatus(true);
      })
      .catch(error => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
        this._updateConnectionStatus(false, error);
        this._startRetryProcess();
      });
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.unsubscribe = onSnapshot(this.connectionRef, 
        (doc) => {
          // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ–∑–Ω–∞—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
          if (doc.exists()) {
            this._updateConnectionStatus(true);
          }
        },
        (error) => {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
          this._updateConnectionStatus(false, error);
          this._startRetryProcess();
        }
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
      this._updateConnectionStatus(false, error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  _setupNetworkListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ç—å—é
    window.addEventListener('offline', () => {
      console.log("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ç—å—é –ø–æ—Ç–µ—Ä—è–Ω–æ");
      this._updateConnectionStatus(false, { message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º" });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ç—å—é
    window.addEventListener('online', () => {
      console.log("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
      this._checkConnection();
    });
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  _startRetryProcess() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.retryInterval) {
      clearInterval(this.retryInterval);
    }

    this.retryCount = 0;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    this.retryInterval = setInterval(() => {
      if (this.isConnected || this.retryCount >= this.maxRetries) {
        clearInterval(this.retryInterval);
        this.retryInterval = null;
        
        if (this.retryCount >= this.maxRetries && !this.isConnected) {
          console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${this.maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
          this._notifyListeners({
            connected: false,
            error: `–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${this.maxRetries} –ø–æ–ø—ã—Ç–æ–∫`,
            maxRetriesReached: true
          });
        }
        return;
      }

      this.retryCount++;
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ${this.retryCount}/${this.maxRetries}`);
      this._checkConnection();
    }, 5000); // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Firebase
   * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async _checkConnection() {
    if (!navigator.onLine) {
      this._updateConnectionStatus(false, { message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º" });
      return false;
    }

    try {
      await setDoc(this.connectionRef, {
        lastCheck: serverTimestamp(),
        timestamp: Date.now()
      }, { merge: true });
      
      this._updateConnectionStatus(true);
      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
      this._updateConnectionStatus(false, error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π
   * @param {boolean} connected - –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @param {Error|Object} [error] - –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
   */
  _updateConnectionStatus(connected, error = null) {
    const statusChanged = this.isConnected !== connected;
    this.isConnected = connected;
    
    if (statusChanged || error) {
      const status = {
        connected,
        error: error ? (error.message || JSON.stringify(error)) : null,
        timestamp: Date.now()
      };
      
      this._notifyListeners(status);
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
   * @param {Object} status - –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  _notifyListeners(status) {
    this.listeners.forEach(listener => {
      try {
        listener(status);
      } catch (listenerError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", listenerError);
      }
    });
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @param {Function} listener - –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  addConnectionListener(listener) {
    if (typeof listener === 'function' && !this.listeners.includes(listener)) {
      this.listeners.push(listener);
      
      // –°—Ä–∞–∑—É —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
      listener({
        connected: this.isConnected,
        timestamp: Date.now()
      });
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * @param {Function} listener - –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  removeConnectionListener(listener) {
    const index = this.listeners.indexOf(listener);
    if (index !== -1) {
      this.listeners.splice(index, 1);
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Firebase
   * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async checkConnection() {
    return await this._checkConnection();
  }

  /**
   * –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
   */
  destroy() {
    if (this.unsubscribe) {
      this.unsubscribe();
    }
    
    if (this.retryInterval) {
      clearInterval(this.retryInterval);
    }
    
    window.removeEventListener('online', this._checkConnection);
    window.removeEventListener('offline', this._updateConnectionStatus);
    
    this.listeners = [];
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const connectionService = new FirebaseConnectionService();
export default connectionService;
