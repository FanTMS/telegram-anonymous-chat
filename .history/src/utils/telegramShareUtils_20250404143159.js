import WebApp from '@twa-dev/sdk';

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–∞ Telegram WebApp
 * @param {string} methodName - –ò–º—è –º–µ—Ç–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
const isMethodSupported = (methodName) => {
    try {
        const parts = methodName.split('.');
        let obj = WebApp;
        
        for (let i = 0; i < parts.length; i++) {
            if (!obj[parts[i]]) return false;
            obj = obj[parts[i]];
        }
        
        return typeof obj === 'function';
    } catch (e) {
        return false;
    }
};

/**
 * –î–µ–ª–∏—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Telegram
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export const shareText = async (text) => {
    try {
        if (!isMethodSupported('shareMessageWithResults')) {
            console.warn('shareMessageWithResults is not supported');
            return false;
        }
        
        const result = await WebApp.shareMessageWithResults({
            text
        });
        
        return result && result.ok;
    } catch (error) {
        console.warn('Error sharing text:', error);
        return false;
    }
};

/**
 * –î–µ–ª–∏—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –∏–∑ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ Telegram
 * @param {string} tipTitle - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏
 * @param {string} tipContent - –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
 * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export const shareTip = async (tipTitle, tipContent) => {
    const text = `üí° *${tipTitle}*\n\n${tipContent}\n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏–∑ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –æ–±—â–µ–Ω–∏—é –≤ –ê–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ`;
    return shareText(text);
};
