/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
const fs = require('fs');
const path = require('path');

console.log('üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ canvas –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤
let canvasAvailable = false;
try {
    require.resolve('canvas');
    canvasAvailable = true;
    console.log('‚úÖ –ú–æ–¥—É–ª—å canvas –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤');
} catch (e) {
    console.log('‚ö†Ô∏è –ú–æ–¥—É–ª—å canvas –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é');
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const publicDir = path.join(__dirname, '..', 'public');
const logo192Path = path.join(publicDir, 'logo192.png');
const logo512Path = path.join(publicDir, 'logo512.png');
const faviconPath = path.join(publicDir, 'favicon.ico');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞ —Å Canvas (–±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
const createLogoWithCanvas = async (outputPath, size) => {
    try {
        const { createCanvas } = require('canvas');
        const canvas = createCanvas(size, size);
        const ctx = canvas.getContext('2d');

        // –ó–∞–ª–∏–≤–∫–∞ —Ñ–æ–Ω–∞
        ctx.fillStyle = '#0088cc'; // Telegram-style blue
        ctx.fillRect(0, 0, size, size);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥ –≤ —Ü–µ–Ω—Ç—Ä–µ
        ctx.fillStyle = 'white';
        ctx.beginPath();
        ctx.arc(size / 2, size / 2, size / 3, 0, Math.PI * 2);
        ctx.fill();

        // –î–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É "T"
        ctx.fillStyle = '#0088cc';
        ctx.font = `bold ${size / 2.5}px Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText('T', size / 2, size / 2);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        const buffer = canvas.toBuffer('image/png');
        fs.writeFileSync(outputPath, buffer);
        console.log(`‚úÖ –õ–æ–≥–æ—Ç–∏–ø ${path.basename(outputPath)} —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é Canvas`);
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ —Å Canvas: ${error.message}`);
        return false;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–µ–π—à–µ–≥–æ PNG (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
const createSimplePng = (outputPath, size) => {
    try {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–∞–ª–∏–¥–Ω—ã–π PNG 
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PNG-—Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –¥–∞–Ω–Ω—ã–º–∏
        const pngHeader = Buffer.from([
            0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
            0x00, 0x00, 0x00, 0x0D, // IHDR chunk length
            0x49, 0x48, 0x44, 0x52, // "IHDR"
            0x00, 0x00, (size >> 8) & 0xFF, size & 0xFF, // Width
            0x00, 0x00, (size >> 8) & 0xFF, size & 0xFF, // Height
            0x08, // Bit depth
            0x06, // Color type (RGBA)
            0x00, // Compression method
            0x00, // Filter method
            0x00, // Interlace method
            0xAA, 0xBB, 0xCC, 0xDD, // CRC-32 (placeholder)
            0x00, 0x00, 0x00, 0x10, // IDAT chunk length
            0x49, 0x44, 0x41, 0x54, // "IDAT"
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ zlib –æ–¥–∏–Ω –ø–∏–∫—Å–µ–ª—å —Ü–≤–µ—Ç–∞ #0088cc)
            0x78, 0x9C, 0x63, 0xE8, 0xCD, 0x00, 0x01, 0x46, 0x30, 0x06, 0x00, 0x00, 0x3E, 0x00, 0x05, 0xCF,
            0xAA, 0xBB, 0xCC, 0xDD, // CRC-32 (placeholder)
            0x00, 0x00, 0x00, 0x00, // IEND chunk length
            0x49, 0x45, 0x4E, 0x44, // "IEND"
            0xAE, 0x42, 0x60, 0x82  // CRC-32 for IEND
        ]);

        fs.writeFileSync(outputPath, pngHeader);
        console.log(`‚úÖ –ü—Ä–æ—Å—Ç–æ–π PNG –ª–æ–≥–æ—Ç–∏–ø ${path.basename(outputPath)} —Å–æ–∑–¥–∞–Ω`);
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ PNG: ${error.message}`);
        return false;
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ favicon.ico
const createFavicon = () => {
    try {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π .ico —Ñ–∞–π–ª
        const icoHeader = Buffer.from([
            0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 
            0x00, 0x00, 0x16, 0x00, 0x00, 0x00
        ]);
        fs.writeFileSync(faviconPath, icoHeader);
        console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–π favicon.ico —Å–æ–∑–¥–∞–Ω');
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ favicon.ico: ${error.message}`);
        return false;
    }
};

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
const generateLogos = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ public
    if (!fs.existsSync(publicDir)) {
        console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è public –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: ${publicDir}`);
        return false;
    }

    let success = true;

    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã —Å –ø–æ–º–æ—â—å—é Canvas, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (canvasAvailable) {
        const logo192Success = await createLogoWithCanvas(logo192Path, 192);
        const logo512Success = await createLogoWithCanvas(logo512Path, 512);
        success = logo192Success && logo512Success;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ª–æ–≥–æ—Ç–∏–ø—ã, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å Canvas
        if (!logo192Success) {
            success = createSimplePng(logo192Path, 192) && success;
        }
        if (!logo512Success) {
            success = createSimplePng(logo512Path, 512) && success;
        }
    } else {
        // –ï—Å–ª–∏ Canvas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        success = createSimplePng(logo192Path, 192) && success;
        success = createSimplePng(logo512Path, 512) && success;
    }

    // –°–æ–∑–¥–∞–µ–º favicon
    success = createFavicon() && success;

    return success;
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateLogos()
    .then((success) => {
        if (success) {
            console.log('‚úÖ –í—Å–µ –ª–æ–≥–æ—Ç–∏–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
        } else {
            console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ª–æ–≥–æ—Ç–∏–ø—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        }
    })
    .catch((error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤: ${error.message}`);
    }); 