/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ index.html –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ build
 * –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ index-spa.html
 */
const fs = require('fs');
const path = require('path');
const glob = require('glob');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ index.html –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ build...');

const buildDir = path.join(__dirname, '..', 'build');
const indexPath = path.join(buildDir, 'index.html');
const spaIndexPath = path.join(buildDir, 'index-spa.html');

// –ü–æ–ª—É—á–∞–µ–º PUBLIC_URL –∏–∑ package.json –∏–ª–∏ .env.production
let publicUrl = '';
try {
    const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8'));
    publicUrl = packageJson.homepage || '';
    
    // –ï—Å–ª–∏ homepage –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ —Ä–∞–≤–µ–Ω "/", –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if (publicUrl === '/' || publicUrl === '') {
        publicUrl = '';
    } else if (publicUrl && publicUrl.endsWith('/')) {
        // –£–±–µ—Ä–µ–º trailing slash –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        publicUrl = publicUrl.slice(0, -1);
    }
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω homepage: ${publicUrl || '/'}`);
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ package.json:', error);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ build
if (!fs.existsSync(buildDir)) {
    console.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è build –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
    process.exit(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ JS –∏ CSS —Ñ–∞–π–ª–æ–≤
function findStaticFiles() {
    const staticDir = path.join(buildDir, 'static');
    let jsFiles = [];
    let cssFiles = [];
    
    if (fs.existsSync(staticDir)) {
        try {
            // –ò—â–µ–º JS —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ static/js
            const jsPath = path.join(staticDir, 'js');
            if (fs.existsSync(jsPath)) {
                jsFiles = glob.sync(path.join(jsPath, '*.js'));
            }
            
            // –ò—â–µ–º CSS —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ static/css
            const cssPath = path.join(staticDir, 'css');
            if (fs.existsSync(cssPath)) {
                cssFiles = glob.sync(path.join(cssPath, '*.css'));
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤:', error);
        }
    }
    
    return { jsFiles, cssFiles };
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ index.html
if (!fs.existsSync(indexPath)) {
    console.log('‚ö†Ô∏è –§–∞–π–ª index.html –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ index-spa.html –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    if (fs.existsSync(spaIndexPath)) {
        console.log('üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ index-spa.html –≤ index.html —Å –∑–∞–º–µ–Ω–æ–π %PUBLIC_URL%...');
        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        let content = fs.readFileSync(spaIndexPath, 'utf8');
        
        // –ó–∞–º–µ–Ω—è–µ–º %PUBLIC_URL% –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        content = content.replace(/%PUBLIC_URL%/g, publicUrl);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JS/CSS —Ñ–∞–π–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        const { jsFiles, cssFiles } = findStaticFiles();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è CSS —Ñ–∞–π–ª–æ–≤
        const cssLinks = cssFiles.map(file => {
            const relativePath = '/' + path.relative(buildDir, file).replace(/\\/g, '/');
            return `<link href="${relativePath}" rel="stylesheet">`;
        }).join('\n    ');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è JS —Ñ–∞–π–ª–æ–≤
        const jsScripts = jsFiles.map(file => {
            const relativePath = '/' + path.relative(buildDir, file).replace(/\\/g, '/');
            return `<script src="${relativePath}"></script>`;
        }).join('\n    ');
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–¥ </head>
        if (cssLinks) {
            content = content.replace('</head>', `    ${cssLinks}\n</head>`);
        }
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º JS –ø–µ—Ä–µ–¥ </body>
        if (jsScripts) {
            content = content.replace('</body>', `    ${jsScripts}\n</body>`);
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ index.html
        fs.writeFileSync(indexPath, content);
        console.log('‚úÖ –§–∞–π–ª index.html —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –∑–∞–º–µ–Ω–æ–π %PUBLIC_URL% –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤');
    } else {
        console.log('üìù –§–∞–π–ª index-spa.html –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π index.html...');
        
        // –ò—â–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        const { jsFiles, cssFiles } = findStaticFiles();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è CSS —Ñ–∞–π–ª–æ–≤
        const cssLinks = cssFiles.map(file => {
            const relativePath = '/' + path.relative(buildDir, file).replace(/\\/g, '/');
            return `    <link href="${relativePath}" rel="stylesheet">`;
        }).join('\n');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è JS —Ñ–∞–π–ª–æ–≤
        const jsScripts = jsFiles.map(file => {
            const relativePath = '/' + path.relative(buildDir, file).replace(/\\/g, '/');
            return `    <script src="${relativePath}"></script>`;
        }).join('\n');
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π index.html —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const basicHtml = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Telegram Anonymous Chat</title>
    <base href="/" />
    <link rel="icon" href="/favicon.ico" />
    <link rel="manifest" href="/manifest.json" />
${cssLinks}
</head>
<body>
    <noscript>–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å JavaScript.</noscript>
    <div id="root"></div>
    <script>
        // –î–ª—è SPA –Ω–∞ Netlify, —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        if (typeof window !== 'undefined' && window.location.pathname === '/') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            const isAuthenticated = !!localStorage.getItem('current_user_id');
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
            if (isAuthenticated) {
                window.location.href = '/home';
            } else {
                window.location.href = '/register';
            }
        }
    </script>
${jsScripts}
</body>
</html>`;

        fs.writeFileSync(indexPath, basicHtml);
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π index.html —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏');
    }
} else {
    // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤ –Ω–µ–º %PUBLIC_URL% –∏ –∑–∞–º–µ–Ω–∏–º –∏—Ö
    let content = fs.readFileSync(indexPath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ CSS –∏ JS —Ñ–∞–π–ª—ã
    const hasJsLinks = content.includes('<script src="/static/js/') || content.includes('<script src="static/js/');
    const hasCssLinks = content.includes('<link href="/static/css/') || content.includes('<link href="static/css/');
    
    if (!hasJsLinks || !hasCssLinks) {
        console.log('‚ö†Ô∏è –í index.html –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ JS –∏–ª–∏ CSS —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤–ª—è–µ–º...');
        
        // –ò—â–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        const { jsFiles, cssFiles } = findStaticFiles();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è CSS —Ñ–∞–π–ª–æ–≤
        const cssLinks = cssFiles.map(file => {
            const relativePath = '/' + path.relative(buildDir, file).replace(/\\/g, '/');
            return `<link href="${relativePath}" rel="stylesheet">`;
        }).join('\n    ');
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è JS —Ñ–∞–π–ª–æ–≤
        const jsScripts = jsFiles.map(file => {
            const relativePath = '/' + path.relative(buildDir, file).replace(/\\/g, '/');
            return `<script src="${relativePath}"></script>`;
        }).join('\n    ');
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–¥ </head> –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (!hasCssLinks && cssLinks) {
            content = content.replace('</head>', `    ${cssLinks}\n</head>`);
        }
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º JS –ø–µ—Ä–µ–¥ </body> –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (!hasJsLinks && jsScripts) {
            content = content.replace('</body>', `    ${jsScripts}\n</body>`);
        }
        
        fs.writeFileSync(indexPath, content);
        console.log('‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞ JS –∏ CSS —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ index.html');
    }
    
    if (content.includes('%PUBLIC_URL%')) {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —à–∞–±–ª–æ–Ω %PUBLIC_URL% –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º index.html, –∑–∞–º–µ–Ω—è–µ–º...');
        content = content.replace(/%PUBLIC_URL%/g, publicUrl);
        fs.writeFileSync(indexPath, content);
        console.log('‚úÖ %PUBLIC_URL% –∑–∞–º–µ–Ω–µ–Ω –Ω–∞', publicUrl || '/');
    } else {
        console.log('‚úÖ –§–∞–π–ª index.html —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–±–ª–æ–Ω–æ–≤');
    }
}

console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ index.html –∑–∞–≤–µ—Ä—à–µ–Ω–∞'); 