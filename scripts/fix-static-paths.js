/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º
 * –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ –ø—É—Ç–∏ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –∏ HTML –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /, –∞ –Ω–µ —Å %PUBLIC_URL%
 */
const fs = require('fs');
const path = require('path');

console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º...');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
const manifestPath = path.join(__dirname, '..', 'public', 'manifest.json');
if (fs.existsSync(manifestPath)) {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –≤ manifest.json');
        const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
        let modified = false;

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ manfiest.json
        if (manifest.icons) {
            manifest.icons.forEach(icon => {
                if (icon.src && !icon.src.startsWith('/') && !icon.src.startsWith('http')) {
                    icon.src = '/' + icon.src;
                    modified = true;
                }
            });
        }

        if (modified) {
            fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
            console.log('‚úÖ –ü—É—Ç–∏ –≤ manifest.json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
        } else {
            console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –≤ manifest.json –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ manifest.json:', error);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —Ñ–∞–π–ª–æ–≤ –≤ public
const publicDir = path.join(__dirname, '..', 'public');
const htmlFiles = fs.readdirSync(publicDir).filter(file => file.endsWith('.html'));

htmlFiles.forEach(file => {
    const htmlPath = path.join(publicDir, file);
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –≤ ${file}`);
        let content = fs.readFileSync(htmlPath, 'utf8');
        let modified = false;

        // –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã, —É–±–µ–∂–¥–∞—è—Å—å, —á—Ç–æ –æ–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /
        const resourcePatterns = [
            { regex: /href\s*=\s*["']((?!https?:|\/)[^"']+)["']/g, replace: 'href="/$1"' },
            { regex: /src\s*=\s*["']((?!https?:|\/)[^"']+)["']/g, replace: 'src="/$1"' }
        ];

        resourcePatterns.forEach(pattern => {
            if (pattern.regex.test(content)) {
                content = content.replace(pattern.regex, pattern.replace);
                modified = true;
            }
        });

        if (modified) {
            fs.writeFileSync(htmlPath, content);
            console.log(`‚úÖ –ü—É—Ç–∏ –≤ ${file} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã`);
        } else {
            console.log(`‚úÖ –í—Å–µ –ø—É—Ç–∏ –≤ ${file} –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ`);
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${file}:`, error);
    }
});

console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
