/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º
 */
const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –≤ index.html
const fixIndexPaths = () => {
    const indexPath = path.join(__dirname, '..', 'public', 'index.html');

    if (!fs.existsSync(indexPath)) {
        console.error('‚ùå –§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return false;
    }

    let content = fs.readFileSync(indexPath, 'utf8');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PUBLIC_URL
    if (content.includes('%PUBLIC_URL%')) {
        console.log('‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –≤ index.html –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        return true;
    }

    // –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ %PUBLIC_URL%
    content = content.replace(/href="\/favicon.ico"/g, 'href="%PUBLIC_URL%/favicon.ico"');
    content = content.replace(/href="\/logo192.png"/g, 'href="%PUBLIC_URL%/logo192.png"');
    content = content.replace(/href="\/manifest.json"/g, 'href="%PUBLIC_URL%/manifest.json"');

    fs.writeFileSync(indexPath, content, 'utf8');
    console.log('‚úÖ –ü—É—Ç–∏ –≤ index.html –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
    return true;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ
const fixManifestPaths = () => {
    const manifestPath = path.join(__dirname, '..', 'public', 'manifest.json');

    if (!fs.existsSync(manifestPath)) {
        console.error('‚ùå –§–∞–π–ª manifest.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return false;
    }

    try {
        const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º start_url
        if (manifest.start_url !== '.') {
            manifest.start_url = '.';
            console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω start_url –≤ manifest.json');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –∏–∫–æ–Ω–∫–∞–º
        manifest.icons.forEach(icon => {
            if (icon.src.startsWith('/')) {
                icon.src = icon.src.substring(1);
                console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ: ${icon.src}`);
            }
        });

        fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2), 'utf8');
        console.log('‚úÖ –ü—É—Ç–∏ –≤ manifest.json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ manifest.json:', error);
        return false;
    }
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const checkStaticFiles = () => {
    const publicDir = path.join(__dirname, '..', 'public');
    const requiredFiles = ['favicon.ico', 'manifest.json'];

    const missingFiles = requiredFiles.filter(file => !fs.existsSync(path.join(publicDir, file)));

    if (missingFiles.length > 0) {
        console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: ${missingFiles.join(', ')}`);
        
        // –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç favicon.ico, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if (missingFiles.includes('favicon.ico')) {
            try {
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π favicon.ico
                const faviconPath = path.join(publicDir, 'favicon.ico');
                const icoHeader = Buffer.from([
                    0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x10, 
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 
                    0x00, 0x00, 0x16, 0x00, 0x00, 0x00
                ]);
                fs.writeFileSync(faviconPath, icoHeader);
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª: favicon.ico`);
            } catch (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ favicon.ico:`, err);
            }
        }
        
        // –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç manifest.json, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        if (missingFiles.includes('manifest.json')) {
            try {
                const manifestPath = path.join(publicDir, 'manifest.json');
                // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π manifest.json –±–µ–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ PNG-–∏–∫–æ–Ω–∫–∏
                const baseManifest = {
                    "short_name": "Telegram Chat",
                    "name": "Telegram Anonymous Chat",
                    "icons": [
                        {
                            "src": "favicon.ico",
                            "sizes": "64x64 32x32 24x24 16x16",
                            "type": "image/x-icon"
                        }
                    ],
                    "start_url": ".",
                    "display": "standalone",
                    "theme_color": "#0088cc",
                    "background_color": "#ffffff"
                };
                fs.writeFileSync(manifestPath, JSON.stringify(baseManifest, null, 2));
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π manifest.json`);
            } catch (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ manifest.json:`, err);
            }
        }
    } else {
        console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    }
};

// –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const createEnvFile = () => {
    const envPath = path.join(__dirname, '..', '.env');
    const envLocalPath = path.join(__dirname, '..', '.env.local');

    // –ï—Å–ª–∏ .env.local —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (fs.existsSync(envLocalPath)) {
        console.log('‚úÖ –§–∞–π–ª .env.local –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –ï—Å–ª–∏ .env –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!fs.existsSync(envPath)) {
        const envContent = `
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
REACT_APP_PUBLIC_URL=
PUBLIC_URL=
    `;

        fs.writeFileSync(envPath, envContent.trim(), 'utf8');
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ PUBLIC_URL');
    } else {
        // –ï—Å–ª–∏ .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PUBLIC_URL
        let envContent = fs.readFileSync(envPath, 'utf8');

        if (!envContent.includes('PUBLIC_URL=')) {
            envContent += '\nPUBLIC_URL=\n';
            fs.writeFileSync(envPath, envContent, 'utf8');
            console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è PUBLIC_URL –≤ —Ñ–∞–π–ª .env');
        }
    }
};

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
checkStaticFiles();
fixIndexPaths();
fixManifestPaths();
createEnvFile();

console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ—Å—É—Ä—Å–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
