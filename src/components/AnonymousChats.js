import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import { db } from '../firebase';
import { doc, getDocs, query, where, collection, onSnapshot, orderBy, limit, serverTimestamp, setDoc, getDoc } from 'firebase/firestore';
import DatabaseLoadingIndicator from './DatabaseLoadingIndicator';
import '../styles/AnonymousChats.css';

const AnonymousChats = () => {
    const { user, isAuthenticated } = useAuth();
    const [activeChats, setActiveChats] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [dbLoading, setDbLoading] = useState(true);
    const navigate = useNavigate();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        const checkDbConnection = async () => {
            try {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                const timeoutPromise = new Promise((_, reject) => {
                    setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö')), 10000);
                });

                // –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const dbCheckPromise = getDoc(doc(db, 'system', 'config'));

                // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                await Promise.race([timeoutPromise, dbCheckPromise]);
                setDbLoading(false);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
                setDbLoading(false);
                setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            }
        };

        checkDbConnection();
    }, []);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const handleDbLoadComplete = () => {
        setDbLoading(false);
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —á–∞—Ç–æ–≤
    useEffect(() => {
        if (!isAuthenticated || !user || dbLoading) {
            setLoading(false);
            return;
        }

        try {
            setLoading(true);
            
            // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const chatsQuery = query(
                collection(db, 'chats'),
                where('participants', 'array-contains', user.id),
                where('isActive', '==', true),
                where('isAnonymous', '==', true),
                orderBy('updatedAt', 'desc'),
                limit(10)
            );
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤
            const unsubscribe = onSnapshot(chatsQuery, async (snapshot) => {
                const chatsData = [];
                
                for (const doc of snapshot.docs) {
                    const chatData = doc.data();
                    
                    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                    const partnerId = chatData.participants.find(id => id !== user.id);
                    let partnerInfo = { name: '–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫' };
                    
                    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
                    if (partnerId && !chatData.isFullyAnonymous) {
                        try {
                            const partnerDoc = await getDocs(query(
                                collection(db, 'users'),
                                where('id', '==', partnerId)
                            ));
                            
                            if (!partnerDoc.empty) {
                                const userData = partnerDoc.docs[0].data();
                                partnerInfo = {
                                    name: userData.displayName || '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
                                    avatar: userData.photoURL
                                };
                            }
                        } catch (err) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:', err);
                        }
                    }
                    
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
                    chatsData.push({
                        id: doc.id,
                        partner: partnerInfo,
                        lastMessage: chatData.lastMessage || null,
                        updatedAt: chatData.updatedAt?.toDate() || new Date(),
                        unreadCount: (chatData.unreadCount && chatData.unreadCount[user.id]) || 0
                    });
                }
                
                setActiveChats(chatsData);
                setLoading(false);
            }, (err) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:', err);
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤');
                setLoading(false);
            });
            
            return () => unsubscribe();
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —á–∞—Ç—ã:', err);
            setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤');
            setLoading(false);
        }
    }, [user, isAuthenticated, dbLoading]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω–ª–∞–π–Ω)
    useEffect(() => {
        if (!isAuthenticated || !user || dbLoading) return;
        
        const updateOnlineStatus = async () => {
            try {
                const userStatusRef = doc(db, 'userStatus', user.id);
                await setDoc(userStatusRef, {
                    isOnline: true,
                    lastSeen: serverTimestamp(),
                    userId: user.id
                }, { merge: true });
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const handleBeforeUnload = async () => {
                    await setDoc(userStatusRef, {
                        isOnline: false,
                        lastSeen: serverTimestamp()
                    }, { merge: true });
                };
                
                window.addEventListener('beforeunload', handleBeforeUnload);
                
                return () => {
                    window.removeEventListener('beforeunload', handleBeforeUnload);
                    setDoc(userStatusRef, {
                        isOnline: false,
                        lastSeen: serverTimestamp()
                    }, { merge: true });
                };
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            }
        };
        
        updateOnlineStatus();
    }, [user, isAuthenticated, dbLoading]);

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∏—Å–∫—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    const handleStartSearch = () => {
        navigate('/random-chat');
    };

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —á–∞—Ç—É
    const handleOpenChat = (chatId) => {
        navigate(`/chat/${chatId}`);
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const formatMessageTime = (timestamp) => {
        if (!timestamp) return '';
        
        const messageDate = new Date(timestamp);
        const now = new Date();
        const diffDays = Math.floor((now - messageDate) / (1000 * 60 * 60 * 24));
        
        if (diffDays === 0) {
            // –°–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
            return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        } else if (diffDays === 1) {
            // –í—á–µ—Ä–∞
            return '–í—á–µ—Ä–∞';
        } else if (diffDays < 7) {
            // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
            const days = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
            return days[messageDate.getDay()];
        } else {
            // –î–∞—Ç–∞
            return messageDate.toLocaleDateString();
        }
    };

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if (dbLoading) {
        return <DatabaseLoadingIndicator onComplete={handleDbLoadComplete} />;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (loading) {
        return (
            <div className="anonymous-chats-loading">
                <div className="loading-spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</p>
            </div>
        );
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
    if (error) {
        return (
            <div className="anonymous-chats-error">
                <div className="error-icon">‚ö†Ô∏è</div>
                <p>{error}</p>
                <button onClick={() => window.location.reload()}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
            </div>
        );
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!isAuthenticated) {
        return (
            <div className="anonymous-chats-auth">
                <div className="auth-icon">üîí</div>
                <h2>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
                <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–æ–Ω–∏–º–Ω—ã–º —á–∞—Ç–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</p>
                <button onClick={() => navigate('/login')}>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</button>
            </div>
        );
    }

    return (
        <div className="anonymous-chats-container">
            <h1 className="page-title">–ê–Ω–æ–Ω–∏–º–Ω—ã–µ —á–∞—Ç—ã</h1>
            
            <div className="search-button-container">
                <button className="search-button" onClick={handleStartSearch}>
                    <span className="search-icon">üîç</span>
                    –ù–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                </button>
            </div>
            
            {activeChats.length > 0 ? (
                <div className="active-chats">
                    <h2 className="section-title">–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã</h2>
                    <div className="chats-list">
                        {activeChats.map(chat => (
                            <div 
                                key={chat.id} 
                                className="chat-item" 
                                onClick={() => handleOpenChat(chat.id)}
                            >
                                <div className="chat-avatar">
                                    {chat.partner.avatar ? (
                                        <img src={chat.partner.avatar} alt="–ê–≤–∞—Ç–∞—Ä —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞" />
                                    ) : (
                                        <div className="chat-initials">
                                            {chat.partner.name.charAt(0).toUpperCase()}
                                        </div>
                                    )}
                                </div>
                                <div className="chat-info">
                                    <div className="chat-header">
                                        <h3 className="chat-name">{chat.partner.name}</h3>
                                        <span className="chat-time">
                                            {chat.lastMessage ? formatMessageTime(chat.updatedAt) : ''}
                                        </span>
                                    </div>
                                    <p className="chat-last-message">
                                        {chat.lastMessage ? 
                                            (chat.lastMessage.senderId === user.id ? 
                                                `–í—ã: ${chat.lastMessage.text}` : 
                                                chat.lastMessage.text) 
                                            : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}
                                    </p>
                                    {chat.unreadCount > 0 && (
                                        <div className="unread-badge">{chat.unreadCount}</div>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            ) : (
                <div className="empty-chats">
                    <div className="empty-icon">üí¨</div>
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —á–∞—Ç–æ–≤</p>
                    <p className="empty-subtitle">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</p>
                </div>
            )}
            
            <div className="info-block">
                <h3>–û–± –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —á–∞—Ç–∞—Ö</h3>
                <p>–ê–Ω–æ–Ω–∏–º–Ω—ã–µ —á–∞—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–±—â–∞—Ç—å—Å—è —Å –Ω–µ–∑–Ω–∞–∫–æ–º—ã–º–∏ –ª—é–¥—å–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.</p>
                <ul>
                    <li>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º</li>
                    <li>–í–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É</li>
                    <li>–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥</li>
                </ul>
            </div>
        </div>
    );
};

export default AnonymousChats; 