import { useState, useEffect, useRef } from 'react'
import { Button } from './Button'
import { Card } from './Card'
import { Input } from './Input'
import WebApp from '@twa-dev/sdk'

// –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
type MessageType = 'user' | 'bot' | 'system'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–æ–±—â–µ–Ω–∏—è
interface BotMessage {
  id: string
  type: MessageType
  text: string
  timestamp: number
  isLoading?: boolean
}

interface BotChatInterfaceProps {
  initialMessages?: BotMessage[]
  onSendMessage?: (message: string) => void
  suggestedCommands?: string[]
  showTypingIndicator?: boolean
  className?: string
}

export const BotChatInterface = ({
  initialMessages = [],
  onSendMessage,
  suggestedCommands = ['–ü—Ä–∏–≤–µ—Ç', '–ü–æ–º–æ—â—å', '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
  showTypingIndicator = false,
  className = ''
}: BotChatInterfaceProps) => {
  const [messages, setMessages] = useState<BotMessage[]>(initialMessages)
  const [newMessage, setNewMessage] = useState('')
  const [isTyping, setIsTyping] = useState(showTypingIndicator)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const isDarkTheme = WebApp.colorScheme === 'dark'

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
  const simulateBotResponse = (userMessage: string) => {
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    setIsTyping(true)

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
      setIsTyping(false)

      // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
      let botReply = ''
      const lowerMessage = userMessage.toLowerCase()

      if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç')) {
        botReply = '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?'
      } else if (lowerMessage.includes('–ø–æ–º–æ—â—å')) {
        botReply = '–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é: /start - –Ω–∞—á–∞—Ç—å —á–∞—Ç, /help - –ø–æ–º–æ—â—å, /find - –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, /profile - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.'
      } else if (lowerMessage.includes('—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫') || lowerMessage.includes('–Ω–∞–π—Ç–∏')) {
        botReply = '–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
      } else if (lowerMessage.includes('–ø—Ä–æ—Ñ–∏–ª—å')) {
        botReply = '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: –ò–º—è - –î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –†–µ–π—Ç–∏–Ω–≥ - 4.5‚≠ê'
      } else {
        botReply = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.'
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
      addMessage('bot', botReply)
    }, 1000)
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const addMessage = (type: MessageType, text: string) => {
    const newMsg: BotMessage = {
      id: `msg_${Date.now()}`,
      type,
      text,
      timestamp: Date.now()
    }
    setMessages(prev => [...prev, newMsg])
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = () => {
    if (newMessage.trim() === '') return

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage('user', newMessage)

    // –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (onSendMessage) {
      onSendMessage(newMessage)
    } else {
      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ª–æ–≥–∏–∫—É
      simulateBotResponse(newMessage)
    }

    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setNewMessage('')
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
  const handleSuggestedCommand = (command: string) => {
    setNewMessage(command)
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSendMessage()
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (timestamp: number) => {
    const date = new Date(timestamp)
    return `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`
  }

  return (
    <div className={`flex flex-col ${className}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
      <div className="bg-blue-500 text-white p-3 rounded-t-lg flex justify-between items-center">
        <div className="flex items-center">
          <div className="w-8 h-8 rounded-full bg-white flex items-center justify-center text-blue-500 mr-2">
            ü§ñ
          </div>
          <div>
            <h3 className="font-medium">–ß–∞—Ç-–±–æ—Ç</h3>
            <p className="text-xs opacity-80">{isTyping ? '–ø–µ—á–∞—Ç–∞–µ—Ç...' : '–æ–Ω–ª–∞–π–Ω'}</p>
          </div>
        </div>
      </div>

      {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <Card className="flex-grow overflow-y-auto p-0 max-h-96">
        <div className="flex flex-col p-3 overflow-y-auto h-full">
          {messages.length === 0 ? (
            <div className="flex flex-col items-center justify-center h-full py-10 text-gray-500">
              <div className="text-3xl mb-3">üëã</div>
              <p>–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥</p>
            </div>
          ) : (
            messages.map((msg) => (
              <div
                key={msg.id}
                className={`mb-3 ${
                  msg.type === 'user' ? 'self-end' : 'self-start'
                } max-w-[80%]`}
              >
                <div
                  className={`p-3 rounded-lg ${
                    msg.type === 'user'
                      ? 'bg-blue-500 text-white'
                      : msg.type === 'system'
                      ? 'bg-gray-200 text-gray-800'
                      : isDarkTheme
                      ? 'bg-gray-700 text-white'
                      : 'bg-gray-200 text-gray-800'
                  }`}
                >
                  <p>{msg.text}</p>
                  <div
                    className={`text-xs mt-1 ${
                      msg.type === 'user' ? 'text-blue-100' : 'text-gray-500'
                    }`}
                  >
                    {formatTime(msg.timestamp)}
                  </div>
                </div>
              </div>
            ))
          )}

          {isTyping && (
            <div className="self-start max-w-[80%] mb-3">
              <div className={`p-3 rounded-lg ${isDarkTheme ? 'bg-gray-700' : 'bg-gray-200'}`}>
                <div className="flex space-x-1">
                  <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '0ms' }}></div>
                  <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '150ms' }}></div>
                  <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '300ms' }}></div>
                </div>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>
      </Card>

      {/* –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã */}
      {suggestedCommands.length > 0 && (
        <div className="flex overflow-x-auto py-2 space-x-2">
          {suggestedCommands.map((command, index) => (
            <Button
              key={index}
              variant="outline"
              onClick={() => handleSuggestedCommand(command)}
              className="whitespace-nowrap"
            >
              {command}
            </Button>
          ))}
        </div>
      )}

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
      <div className="flex gap-2 mt-3">
        <Input
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          fullWidth
        />
        <Button
          onClick={handleSendMessage}
          disabled={newMessage.trim() === ''}
          className="bg-blue-500 hover:bg-blue-600"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="currentColor"
            className="w-5 h-5"
          >
            <path d="M3.478 2.405a.75.75 0 00-.926.94l2.432 7.905H13.5a.75.75 0 010 1.5H4.984l-2.432 7.905a.75.75 0 00.926.94 60.519 60.519 0 0018.445-8.986.75.75 0 000-1.218A60.517 60.517 0 003.478 2.405z" />
          </svg>
        </Button>
      </div>
    </div>
  )
}
