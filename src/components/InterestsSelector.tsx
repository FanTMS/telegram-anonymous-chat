import { useState, useEffect } from 'react'
import { Button } from './Button'
import { Interest, availableInterests } from '../utils/interests'

interface InterestsSelectorProps {
  selectedInterests: string[]
  onChange: (interests: string[]) => void
  maxSelections?: number
}

export const InterestsSelector = ({
  selectedInterests,
  onChange,
  maxSelections = 5,
}: InterestsSelectorProps) => {
  const [selected, setSelected] = useState<Set<string>>(new Set(selectedInterests))
  const [searchTerm, setSearchTerm] = useState('')
  const [activeCategory, setActiveCategory] = useState<string | null>(null)

  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
  useEffect(() => {
    setSelected(new Set(selectedInterests))
  }, [selectedInterests])

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
  const categories = [
    { id: 'hobby', name: '–•–æ–±–±–∏', icon: 'üé®' },
    { id: 'entertainment', name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', icon: 'üé¨' },
    { id: 'lifestyle', name: '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', icon: 'üåà' },
    { id: 'knowledge', name: '–ó–Ω–∞–Ω–∏—è', icon: 'üìö' },
    { id: 'other', name: '–î—Ä—É–≥–æ–µ', icon: 'üîç' }
  ]

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const filteredInterests = availableInterests.filter((interest: Interest) => {
    const matchesSearch = searchTerm === '' ||
                          interest.name.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesCategory = activeCategory === null || interest.category === activeCategory
    return matchesSearch && matchesCategory
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞
  const handleToggleInterest = (interestId: string) => {
    const newSelected = new Set(selected)

    if (newSelected.has(interestId)) {
      newSelected.delete(interestId)
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
      if (newSelected.size < maxSelections) {
        newSelected.add(interestId)
      } else {
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        console.warn(`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ ${maxSelections} –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤`)
        return
      }
    }

    setSelected(newSelected)
    onChange(Array.from(newSelected))
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleCategoryFilter = (categoryId: string) => {
    if (activeCategory === categoryId) {
      setActiveCategory(null) // –°–Ω–∏–º–∞–µ–º —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞
    } else {
      setActiveCategory(categoryId)
    }
  }

  return (
    <div className="interest-selector">
      {/* –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ */}
      <div className="mb-4">
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="–ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤..."
          className="w-full p-2 border rounded-md"
        />
      </div>

      {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      <div className="flex gap-2 overflow-x-auto pb-2 mb-4">
        {categories.map(category => (
          <Button
            key={category.id}
            onClick={() => handleCategoryFilter(category.id)}
            variant={activeCategory === category.id ? 'primary' : 'outline'}
            className="whitespace-nowrap"
          >
            <span className="mr-1">{category.icon}</span> {category.name}
          </Button>
        ))}
      </div>

      {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ */}
      <div className="mb-3 text-sm">
        –í—ã–±—Ä–∞–Ω–æ: {selected.size}/{maxSelections}
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ */}
      <div className="flex flex-wrap gap-2">
        {filteredInterests.length === 0 ? (
          <div className="text-center w-full py-3 text-gray-500">
            –ò–Ω—Ç–µ—Ä–µ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </div>
        ) : (
          filteredInterests.map((interest: Interest) => (
            <Button
              key={interest.id}
              onClick={() => handleToggleInterest(interest.id)}
              variant={selected.has(interest.id) ? 'primary' : 'outline'}
              className="flex items-center"
            >
              <span className="mr-1">{interest.icon}</span>
              {interest.name}
            </Button>
          ))
        )}
      </div>
    </div>
  )
}
