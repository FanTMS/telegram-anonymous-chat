import { useState, useRef, useEffect } from 'react'
import { Button } from './Button'
import { messageRequiresModeration } from '../utils/moderation'
import WebApp from '@twa-dev/sdk'

interface MessageInputProps {
  onSendMessage: (text: string) => void
  disabled?: boolean
  placeholder?: string
}

export const MessageInput = ({
  onSendMessage,
  disabled = false,
  placeholder = '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...'
}: MessageInputProps) => {
  const [message, setMessage] = useState('')
  const [isExpanded, setIsExpanded] = useState(false)
  const [isModeratingMessage, setIsModeratingMessage] = useState(false)
  const textareaRef = useRef<HTMLTextAreaElement>(null)

  // –ê–≤—Ç–æ—Ä–µ—Å–∞–π–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto'
      textareaRef.current.style.height = `${Math.min(120, textareaRef.current.scrollHeight)}px`
    }
  }, [message])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setMessage(e.target.value)
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = () => {
    if (!message.trim() || disabled) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è
    const needsModeration = messageRequiresModeration(message)

    if (needsModeration) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      setIsModeratingMessage(true)

      WebApp.showPopup({
        title: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
        message: '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.',
        buttons: [{ type: 'ok' }]
      })

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
      setMessage('')
      setIsExpanded(false)
      setIsModeratingMessage(false)
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
      onSendMessage(message.trim())
      setMessage('')
      setIsExpanded(false)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  return (
    <div className="relative">
      <div className={`flex items-end border rounded-lg overflow-hidden transition-shadow ${isExpanded ? 'shadow-md' : ''}`}>
        <textarea
          ref={textareaRef}
          value={message}
          onChange={handleChange}
          onKeyDown={handleKeyDown}
          onFocus={() => setIsExpanded(true)}
          onBlur={() => setIsExpanded(false)}
          placeholder={placeholder}
          disabled={disabled || isModeratingMessage}
          className="flex-1 p-3 resize-none outline-none text-sm min-h-[44px] max-h-[120px]"
          rows={1}
        />
        <Button
          onClick={handleSendMessage}
          disabled={!message.trim() || disabled || isModeratingMessage}
          className="m-1 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700"
        >
          <span className="text-lg">üì§</span>
        </Button>
      </div>

      {isModeratingMessage && (
        <div className="text-xs text-amber-600 mt-1">
          –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        </div>
      )}
    </div>
  )
}
