import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { motion } from 'framer-motion'
import { Card } from './Card'
import { Button } from './Button'
import { User, getCurrentUser } from '../utils/user'
import { getRecommendedUsers, MatchingStrategy } from '../utils/recommendations'
import { createChat } from '../utils/chat'
import { useNotificationService } from '../utils/notifications'

interface RecommendedUsersProps {
  limit?: number
  showFilter?: boolean
  onSelectUser?: (user: User) => void
}

export const RecommendedUsers: React.FC<RecommendedUsersProps> = ({
  limit = 5,
  showFilter = true,
  onSelectUser
}) => {
  const navigate = useNavigate()
  const notifications = useNotificationService()
  const [loading, setLoading] = useState(true)
  const [recommendations, setRecommendations] = useState<{
    user: User
    score: number
    commonInterests?: string[]
    matchQuality?: number
    conversationLength?: number
    responseTime?: number
    lastChatDate?: number
    goodExperience?: boolean
  }[]>([])
  const [strategy, setStrategy] = useState<MatchingStrategy>('similar')

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  useEffect(() => {
    const loadRecommendations = () => {
      try {
        const currentUser = getCurrentUser()
        if (!currentUser) return

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        let matchingPreference: MatchingStrategy = 'similar'

        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if (currentUser.settings?.matchingPreference) {
          matchingPreference = currentUser.settings.matchingPreference as MatchingStrategy
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–ª–∏ —Ç–µ–∫—É—â—É—é –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é
        const userRecommendations = getRecommendedUsers(
          limit,
          strategy || matchingPreference
        )

        setRecommendations(userRecommendations)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error)
      } finally {
        setLoading(false)
      }
    }

    loadRecommendations()
  }, [limit, strategy])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  const handleChangeStrategy = (newStrategy: MatchingStrategy) => {
    setStrategy(newStrategy)
    setLoading(true)
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  const handleStartChat = (userId: string) => {
    try {
      const currentUser = getCurrentUser()
      if (!currentUser) return

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      const newChat = createChat([currentUser.id, userId])

      if (newChat) {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
        if (onSelectUser) {
          const selectedUser = recommendations.find(rec => rec.user.id === userId)?.user
          if (selectedUser) {
            onSelectUser(selectedUser)
          }
        } else {
          // –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —á–∞—Ç—É
          navigate(`/chat/${newChat.id}`)
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notifications.showSuccess('–ß–∞—Ç —Å–æ–∑–¥–∞–Ω. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:', error)
      notifications.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.')
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞—Ç–∞
  const formatLastChatTime = (timestamp?: number) => {
    if (!timestamp) return null

    const now = Date.now()
    const diff = now - timestamp

    // –ú–µ–Ω–µ–µ —á–∞—Å–∞
    if (diff < 60 * 60 * 1000) {
      const minutes = Math.floor(diff / (60 * 1000))
      return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`
    }

    // –ú–µ–Ω–µ–µ —Å—É—Ç–æ–∫
    if (diff < 24 * 60 * 60 * 1000) {
      const hours = Math.floor(diff / (60 * 60 * 1000))
      return `${hours} —á –Ω–∞–∑–∞–¥`
    }

    // –ú–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏
    if (diff < 7 * 24 * 60 * 60 * 1000) {
      const days = Math.floor(diff / (24 * 60 * 60 * 1000))
      return `${days} –¥–Ω –Ω–∞–∑–∞–¥`
    }

    // –ë–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏
    const date = new Date(timestamp)
    return date.toLocaleDateString()
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
  const formatResponseTime = (milliseconds?: number) => {
    if (!milliseconds) return null

    if (milliseconds < 60 * 1000) {
      return '–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã'
    } else if (milliseconds < 5 * 60 * 1000) {
      return '–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞'
    } else {
      return '–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã'
    }
  }

  if (loading) {
    return (
      <Card className="p-4">
        <div className="flex justify-center py-6">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
        </div>
      </Card>
    )
  }

  if (recommendations.length === 0) {
    return (
      <Card className="p-4">
        <div className="text-center py-4">
          <p className="text-gray-500">–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.</p>
          <p className="text-sm text-gray-400 mt-1">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ.
          </p>
        </div>
      </Card>
    )
  }

  return (
    <Card className="p-4">
      <h3 className="font-semibold mb-3">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏</h3>

      {/* –§–∏–ª—å—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥–±–æ—Ä–∞ */}
      {showFilter && (
        <div className="mb-4">
          <div className="flex flex-wrap gap-2 text-sm">
            <button
              onClick={() => handleChangeStrategy('similar')}
              className={`px-3 py-1 rounded-full ${
                strategy === 'similar'
                  ? 'bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-200'
                  : 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300'
              }`}
            >
              <span className="mr-1">üë•</span> –ü–æ—Ö–æ–∂–∏–µ
            </button>
            <button
              onClick={() => handleChangeStrategy('diverse')}
              className={`px-3 py-1 rounded-full ${
                strategy === 'diverse'
                  ? 'bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-200'
                  : 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300'
              }`}
            >
              <span className="mr-1">üîÑ</span> –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ
            </button>
            <button
              onClick={() => handleChangeStrategy('random')}
              className={`px-3 py-1 rounded-full ${
                strategy === 'random'
                  ? 'bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-200'
                  : 'bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300'
              }`}
            >
              <span className="mr-1">üé≤</span> –°–ª—É—á–∞–π–Ω—ã–µ
            </button>
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
      <div className="space-y-3">
        {recommendations.map((recommendation, index) => (
          <motion.div
            key={recommendation.user.id}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="border rounded-lg p-3 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <div className="h-10 w-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center text-lg font-bold">
                  {recommendation.user.name.charAt(0).toUpperCase()}
                </div>
                <div className="ml-3">
                  <h4 className="font-medium">{recommendation.user.name}</h4>
                  <div className="text-sm text-gray-500">
                    {recommendation.user.age && `${recommendation.user.age} –ª–µ—Ç ‚Ä¢ `}
                    {recommendation.user.interests.length > 0 &&
                      `${recommendation.user.interests.length} –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤`}
                  </div>
                </div>
              </div>

              <Button
                onClick={() => handleStartChat(recommendation.user.id)}
                className="bg-blue-500 hover:bg-blue-600 text-white text-sm py-1 px-3"
              >
                –ù–∞—á–∞—Ç—å —á–∞—Ç
              </Button>
            </div>

            {/* –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ */}
            {recommendation.matchQuality !== undefined && (
              <div className="mt-2 mb-1">
                <div className="bg-gray-100 dark:bg-gray-800 rounded-full h-2 w-full">
                  <div
                    className="bg-blue-500 h-2 rounded-full"
                    style={{ width: `${Math.min(100, recommendation.matchQuality)}%` }}
                  ></div>
                </div>
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <span>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {Math.round(recommendation.matchQuality || 0)}%</span>
                  {recommendation.goodExperience && (
                    <span className="text-green-500">‚úì –•–æ—Ä–æ—à–∏–π –æ–ø—ã—Ç –æ–±—â–µ–Ω–∏—è</span>
                  )}
                </div>
              </div>
            )}

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö */}
            {recommendation.lastChatDate && (
              <div className="mt-1 flex flex-wrap gap-2">
                <span className="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-0.5 rounded-full text-gray-600 dark:text-gray-400">
                  <span className="mr-1">üïí</span>
                  {formatLastChatTime(recommendation.lastChatDate)}
                </span>

                {recommendation.conversationLength && recommendation.conversationLength > 0 && (
                  <span className="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-0.5 rounded-full text-gray-600 dark:text-gray-400">
                    <span className="mr-1">üí¨</span>
                    {recommendation.conversationLength > 20
                      ? '–î–æ–ª–≥–æ–µ –æ–±—â–µ–Ω–∏–µ'
                      : recommendation.conversationLength > 5
                        ? '–°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–Ω–∏–µ'
                        : '–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–±—â–µ–Ω–∏–µ'}
                  </span>
                )}

                {recommendation.responseTime && (
                  <span className="text-xs bg-gray-100 dark:bg-gray-800 px-2 py-0.5 rounded-full text-gray-600 dark:text-gray-400">
                    <span className="mr-1">‚ö°</span>
                    {formatResponseTime(recommendation.responseTime)}
                  </span>
                )}
              </div>
            )}

            {/* –û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã */}
            {recommendation.commonInterests && recommendation.commonInterests.length > 0 && (
              <div className="mt-2">
                <div className="text-xs text-gray-500 mb-1">–û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:</div>
                <div className="flex flex-wrap gap-1">
                  {recommendation.commonInterests.slice(0, 3).map(interest => (
                    <span
                      key={interest}
                      className="bg-blue-50 dark:bg-blue-900 text-blue-600 dark:text-blue-300 text-xs px-2 py-0.5 rounded-full"
                    >
                      {interest}
                    </span>
                  ))}
                  {recommendation.commonInterests.length > 3 && (
                    <span className="text-xs text-gray-500">
                      +{recommendation.commonInterests.length - 3} –µ—â–µ
                    </span>
                  )}
                </div>
              </div>
            )}
          </motion.div>
        ))}
      </div>
    </Card>
  )
}
