import React, { useState, useEffect, useRef, useCallback, memo } from 'react';
import { useNavigate } from 'react-router-dom';
import { signInAnonymously, updateProfile } from 'firebase/auth';
import { collection, getDocs, query, limit, doc, setDoc } from 'firebase/firestore';
import { motion, AnimatePresence } from 'framer-motion';
import { auth, db } from '../firebase';
import { createOrUpdateUser } from '../utils/userService';
import InterestSelector from './InterestSelector';
import { safeHapticFeedback, safeShowPopup, getWebAppTheme } from '../utils/telegramWebAppUtils';
import '../styles/RegistrationForm.css';

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
const PREDEFINED_INTERESTS = [
    { id: 'music', name: '–ú—É–∑—ã–∫–∞', icon: 'üéµ' },
    { id: 'sports', name: '–°–ø–æ—Ä—Ç', icon: '‚öΩ' },
    { id: 'gaming', name: '–ò–≥—Ä—ã', icon: 'üéÆ' },
    { id: 'movies', name: '–ö–∏–Ω–æ', icon: 'üé¨' },
    { id: 'books', name: '–ö–Ω–∏–≥–∏', icon: 'üìö' },
    { id: 'travel', name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', icon: '‚úàÔ∏è' },
    { id: 'cooking', name: '–ö—É–ª–∏–Ω–∞—Ä–∏—è', icon: 'üç≥' },
    { id: 'tech', name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', icon: 'üíª' },
    { id: 'art', name: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', icon: 'üé®' },
    { id: 'nature', name: '–ü—Ä–∏—Ä–æ–¥–∞', icon: 'üå≤' },
    { id: 'science', name: '–ù–∞—É–∫–∞', icon: 'üî¨' },
    { id: 'history', name: '–ò—Å—Ç–æ—Ä–∏—è', icon: 'üèõÔ∏è' }
];

// –ê–¥—ä–µ–∫—Ç–∏–≤—ã –∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
const adjectives = [
    '–í–µ—Å–µ–ª—ã–π', '–£–º–Ω—ã–π', '–°–º–µ–ª—ã–π', '–î–æ–±—Ä—ã–π', '–¢–∏—Ö–∏–π', '–ì—Ä–æ–º–∫–∏–π', '–ë—ã—Å—Ç—Ä—ã–π', '–ú–µ–¥–ª–µ–Ω–Ω—ã–π',
    '–°–∏–ª—å–Ω—ã–π', '–ú—è–≥–∫–∏–π', '–Ø—Ä–∫–∏–π', '–¢–µ–º–Ω—ã–π', '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π', '–ú—É–¥—Ä—ã–π', '–ù–∞—Ö–æ–¥—á–∏–≤—ã–π'
];

const nouns = [
    '–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å', '–ú–µ—á—Ç–∞—Ç–µ–ª—å', '–•—É–¥–æ–∂–Ω–∏–∫', '–ú—É–∑—ã–∫–∞–Ω—Ç', '–ü–∏—Å–∞—Ç–µ–ª—å',
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–§–æ—Ç–æ–≥—Ä–∞—Ñ', '–§–∏–ª–æ—Å–æ—Ñ', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫', '–ü–µ–∫–∞—Ä—å', '–ü–∏–ª–æ—Ç', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
const generateRandomNickname = () => {
    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];
    const noun = nouns[Math.floor(Math.random() * nouns.length)];
    const randomNumber = Math.floor(Math.random() * 1000);
    return `${adjective}_${noun}${randomNumber}`;
};

const RegistrationForm = ({ telegramUser = null }) => {
    // –¢–µ–∫—É—â–∏–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const [currentStep, setCurrentStep] = useState(1);
    const [totalSteps] = useState(3);
    
    // –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã 
    const [formData, setFormData] = useState({
        name: '',
        age: '',
        gender: 'not_specified',
        selectedInterests: [],
        aboutMe: ''
    });
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [success, setSuccess] = useState(false);
    const [error, setError] = useState(null);
    const [theme, setTheme] = useState('light');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const [validationErrors, setValidationErrors] = useState({});
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    const navigate = useNavigate();
    
    // –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    const formContainerRef = useRef(null);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞
    const activeInputRef = useRef(null);
    const inputRefs = useRef({
        name: null,
        age: null,
        aboutMe: null
    });
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
    useEffect(() => {
        setTheme(getWebAppTheme());
    }, []);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ Firebase
    useEffect(() => {
        const checkCollections = async () => {
            try {
                const collections = ['users', 'chats', 'messages', 'interests', 'searchQueue'];
                
                for (const collName of collections) {
                    const collRef = collection(db, collName);
                    try {
                        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                        await getDocs(query(collRef, limit(1)));
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${collName}:`, error);
                        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        try {
                            // –°–æ–∑–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                            const initDocRef = doc(db, collName, '_init');
                            await setDoc(initDocRef, {
                                system: true,
                                createdAt: new Date().toISOString(),
                                description: `Initialization document for ${collName} collection`
                            });
                            console.log(`–ö–æ–ª–ª–µ–∫—Ü–∏—è ${collName} –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞`);
                        } catch (createError) {
                            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é ${collName}:`, createError);
                        }
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error);
            }
        };
        
        checkCollections();
    }, []);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ —à–∞–≥–∞
    useEffect(() => {
        if (formContainerRef.current) {
            formContainerRef.current.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }
    }, [currentStep]);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    const handleChange = useCallback((e) => {
        const { name, value } = e.target;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        activeInputRef.current = {
            name,
            selectionStart: e.target.selectionStart,
            selectionEnd: e.target.selectionEnd
        };
        
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
        if (validationErrors[name]) {
            setValidationErrors(prev => ({
                ...prev,
                [name]: null
            }));
        }
    }, [validationErrors]);
    
    const handleInterestsChange = useCallback((selectedInterests) => {
        setFormData(prev => ({
            ...prev,
            selectedInterests
        }));
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        if (validationErrors.interests) {
            setValidationErrors(prev => ({
                ...prev,
                interests: null
            }));
        }
    }, [validationErrors]);
    
    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        if (activeInputRef.current) {
            const { name, selectionStart, selectionEnd } = activeInputRef.current;
            const inputElement = inputRefs.current[name];
            
            if (inputElement) {
                inputElement.focus();
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                if (selectionStart !== undefined && selectionEnd !== undefined) {
                    try {
                        inputElement.setSelectionRange(selectionStart, selectionEnd);
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                    }
                }
            }
        }
    }, [formData]);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
    const validateStep = useCallback((step) => {
        const errors = {};
        
        switch (step) {
            case 1:
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                break;
                
            case 2:
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                if (!formData.age) {
                    errors.age = '–í–æ–∑—Ä–∞—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
                } else {
                    const age = parseInt(formData.age);
                    if (isNaN(age) || age < 17) {
                        errors.age = '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 17 –ª–µ—Ç';
                    } else if (age > 100) {
                        errors.age = '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –ª–µ—Ç';
                    }
                }
                break;
                
            case 3:
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
                if (formData.selectedInterests.length < 1) {
                    errors.interests = '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å';
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
                if (formData.aboutMe && formData.aboutMe.length > 500) {
                    errors.aboutMe = '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤';
                }
                break;
                
            default:
                break;
        }
        
        setValidationErrors(errors);
        return Object.keys(errors).length === 0;
    }, [formData]);
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    const goToNextStep = useCallback(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        if (!validateStep(currentStep)) {
            // –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ–± –æ—à–∏–±–∫–µ
            safeHapticFeedback('notification', null, 'error');
            return;
        }
        
        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        safeHapticFeedback('selection');
        
        if (currentStep < totalSteps) {
            setCurrentStep(prev => prev + 1);
        } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ
            handleSubmit();
        }
    }, [currentStep, totalSteps, validateStep]);
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    const goToPrevStep = useCallback(() => {
        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        safeHapticFeedback('selection');
        
        if (currentStep > 1) {
            setCurrentStep(prev => prev - 1);
        }
    }, [currentStep]);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
    const handleSubmit = useCallback(async () => {
        console.log("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...");
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–π —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if (!validateStep(currentStep)) {
            console.log("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:", validationErrors);
            return;
        }
        
        setIsSubmitting(true);
        setError(null);
        
        try {
            // –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º
            const nickname = formData.name.trim() || generateRandomNickname();
            if (!formData.name) {
                console.log('–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Å–µ–≤–¥–æ–Ω–∏–º:', nickname);
            }
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            const userData = {
                name: formData.name.trim() || nickname,
                displayName: formData.name.trim() || nickname,
                age: formData.age ? parseInt(formData.age) : null,
                gender: formData.gender,
                interests: formData.selectedInterests.map(interest => 
                    typeof interest === 'string' ? interest : interest.id),
                bio: formData.aboutMe,
                nickname,
                createdAt: new Date().toISOString(),
                status: 'active',
                telegramUser: telegramUser || null
            };
            
            console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã:", userData);
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userCredential = await signInAnonymously(auth);
            const user = userCredential.user;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º displayName
            await updateProfile(user, { displayName: nickname });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Firestore
            await createOrUpdateUser(user.uid, userData);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π user –æ–±—ä–µ–∫—Ç –≤ localStorage –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            localStorage.setItem('current_user', JSON.stringify({
                uid: user.uid,
                displayName: nickname,
                ...userData
            }));
            
            // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ–± —É—Å–ø–µ—Ö–µ
            safeHapticFeedback('notification', null, 'success');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            setSuccess(true);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await safeShowPopup({
                title: '–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
                message: '–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                buttons: [{ text: "–ù–∞—á–∞—Ç—å" }]
            });
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            navigate('/home');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
            setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
            
            // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            safeHapticFeedback('notification', null, 'error');
            
            try {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await safeShowPopup({
                    title: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                    message: err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                    buttons: [{ text: "–ü–æ–Ω—è—Ç–Ω–æ" }]
                });
            } catch (popupError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', popupError);
            }
        } finally {
            setIsSubmitting(false);
        }
    }, [formData, currentStep, navigate, telegramUser, validateStep, validationErrors]);
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    const calculateProgress = () => {
        return Math.max(33, (currentStep / totalSteps) * 100);
    };

    // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —à–∞–≥–æ–≤ —Ñ–æ—Ä–º—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
    const StepWelcomeComponent = memo(({ formData, handleChange, goToNextStep, isSubmitting, inputRefs }) => (
        <div className="form-content">
            <h2 className="form-title">–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è</h2>
            <p className="form-subtitle">–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?</p>
            
            <div className="form-field">
                <div className="input-field with-icon">
                    <i className="input-icon fas fa-user"></i>
                    <input 
                        type="text" 
                        id="name" 
                        name="name"
                        value={formData.name}
                        onChange={handleChange}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º"
                        maxLength={50}
                        ref={el => inputRefs.current.name = el}
                    />
                    <label htmlFor="name">–ò–º—è –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º</label>
                </div>
                <p className="input-hint">–ò–º—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç–µ –ø—É—Å—Ç—ã–º, –º—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º.</p>
            </div>

            <div className="form-navigation">
                <button 
                    className="nav-button next-button"
                    onClick={goToNextStep}
                    disabled={isSubmitting}
                >
                    <span className="button-text">–î–∞–ª–µ–µ</span>
                    <i className="fas fa-arrow-right"></i>
                </button>
            </div>
        </div>
    ));

    const StepPersonalInfoComponent = memo(({ formData, validationErrors, handleChange, goToNextStep, goToPrevStep, isSubmitting, inputRefs }) => (
        <div className="form-content">
            <h2 className="form-title">–ù–µ–º–Ω–æ–≥–æ –æ –≤–∞—Å</h2>
            <p className="form-subtitle">–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤</p>
            
            <div className="form-field">
                <div className="input-field with-icon">
                    <i className="input-icon fas fa-birthday-cake"></i>
                    <input 
                        type="number" 
                        id="age" 
                        name="age"
                        value={formData.age}
                        onChange={handleChange}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç"
                        min={17}
                        max={100}
                        required
                        ref={el => inputRefs.current.age = el}
                    />
                    <label htmlFor="age">–í–æ–∑—Ä–∞—Å—Ç<span className="required-mark">*</span></label>
                </div>
                {validationErrors.age && (
                    <p className="input-error">{validationErrors.age}</p>
                )}
            </div>
            
            <div className="form-field">
                <label className="select-label">–ü–æ–ª</label>
                <div className="gender-select">
                    <div 
                        className={`gender-option ${formData.gender === 'male' ? 'selected' : ''}`}
                        onClick={() => handleChange({ target: { name: 'gender', value: 'male' } })}
                    >
                        <i className="fas fa-mars"></i>
                        <span>–ú—É–∂—Å–∫–æ–π</span>
                    </div>
                    <div 
                        className={`gender-option ${formData.gender === 'female' ? 'selected' : ''}`}
                        onClick={() => handleChange({ target: { name: 'gender', value: 'female' } })}
                    >
                        <i className="fas fa-venus"></i>
                        <span>–ñ–µ–Ω—Å–∫–∏–π</span>
                    </div>
                    <div 
                        className={`gender-option ${formData.gender === 'not_specified' ? 'selected' : ''}`}
                        onClick={() => handleChange({ target: { name: 'gender', value: 'not_specified' } })}
                    >
                        <i className="fas fa-genderless"></i>
                        <span>–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å</span>
                    </div>
                </div>
            </div>

            <div className="form-navigation">
                <button 
                    className="nav-button back-button"
                    onClick={goToPrevStep}
                    disabled={isSubmitting}
                >
                    <i className="fas fa-arrow-left"></i>
                    <span className="button-text">–ù–∞–∑–∞–¥</span>
                </button>
                <button 
                    className="nav-button next-button"
                    onClick={goToNextStep}
                    disabled={isSubmitting}
                >
                    <span className="button-text">–î–∞–ª–µ–µ</span>
                    <i className="fas fa-arrow-right"></i>
                </button>
            </div>
        </div>
    ));

    const StepInterestsAndBioComponent = memo(({ formData, validationErrors, handleChange, handleInterestsChange, goToPrevStep, handleSubmit, isSubmitting, inputRefs }) => (
        <div className="form-content">
            <h2 className="form-title">–ò–Ω—Ç–µ—Ä–µ—Å—ã –∏ –æ —Å–µ–±–µ</h2>
            <p className="form-subtitle">–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ</p>
            
            <div className="form-field">
                <label>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–¥–æ 5)</label>
                <InterestSelector
                    value={formData.selectedInterests}
                    onChange={handleInterestsChange}
                />
                {validationErrors.interests && (
                    <p className="input-error">{validationErrors.interests}</p>
                )}
            </div>
            
            <div className="form-field">
                <div className="input-field textarea-field">
                    <textarea
                        id="aboutMe"
                        name="aboutMe"
                        value={formData.aboutMe}
                        onChange={handleChange}
                        placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                        rows={4}
                        maxLength={500}
                        ref={el => inputRefs.current.aboutMe = el}
                    ></textarea>
                    <label htmlFor="aboutMe">–û —Å–µ–±–µ</label>
                </div>
                <div className="char-counter">
                    {formData.aboutMe ? formData.aboutMe.length : 0}/500
                </div>
                {validationErrors.aboutMe && (
                    <p className="input-error">{validationErrors.aboutMe}</p>
                )}
            </div>

            <div className="form-navigation">
                <button 
                    className="nav-button back-button"
                    onClick={goToPrevStep}
                    disabled={isSubmitting}
                >
                    <i className="fas fa-arrow-left"></i>
                    <span className="button-text">–ù–∞–∑–∞–¥</span>
                </button>
                <button 
                    className="nav-button next-button"
                    onClick={handleSubmit}
                    disabled={isSubmitting}
                >
                    <span className="button-text">
                        {isSubmitting ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å'}
                    </span>
                    {!isSubmitting && <i className="fas fa-check"></i>}
                </button>
            </div>
        </div>
    ));

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —à–∞–≥–æ–≤ —Ñ–æ—Ä–º—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const StepWelcome = () => (
        <motion.div 
            className="form-step active"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            key="step-welcome"
        >
            <StepWelcomeComponent 
                formData={formData}
                handleChange={handleChange}
                goToNextStep={goToNextStep}
                isSubmitting={isSubmitting}
                inputRefs={inputRefs}
            />
        </motion.div>
    );
    
    const StepPersonalInfo = () => (
        <motion.div 
            className="form-step active"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            key="step-personal-info"
        >
            <StepPersonalInfoComponent
                formData={formData}
                validationErrors={validationErrors}
                handleChange={handleChange}
                goToNextStep={goToNextStep}
                goToPrevStep={goToPrevStep}
                isSubmitting={isSubmitting}
                inputRefs={inputRefs}
            />
        </motion.div>
    );
    
    const StepInterestsAndBio = () => (
        <motion.div 
            className="form-step active"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            key="step-interests-bio"
        >
            <StepInterestsAndBioComponent
                formData={formData}
                validationErrors={validationErrors}
                handleChange={handleChange}
                handleInterestsChange={handleInterestsChange}
                goToPrevStep={goToPrevStep}
                handleSubmit={handleSubmit}
                isSubmitting={isSubmitting}
                inputRefs={inputRefs}
            />
        </motion.div>
    );
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const SuccessStep = () => (
        <motion.div 
            className="registration-success"
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.5 }}
        >
            <div className="success-icon">‚úì</div>
            <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
            <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç Telegram</p>
            <motion.button
                className="complete-registration-button"
                onClick={() => navigate('/home')}
                whileTap={{ scale: 0.95 }}
            >
                –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
            </motion.button>
        </motion.div>
    );
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const ErrorStep = () => (
        <motion.div 
            className="registration-error"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
        >
            <div className="error-icon">‚ö†Ô∏è</div>
            <h2>–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h2>
            <p>{error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'}</p>
            <motion.button
                className="retry-button"
                onClick={() => {
                    setError(null);
                    setCurrentStep(1);
                }}
                whileTap={{ scale: 0.95 }}
            >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </motion.button>
        </motion.div>
    );
    
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–≥–∞ —Ñ–æ—Ä–º—ã
    const getStepContent = () => {
        if (success) return <SuccessStep key="success" />;
        if (error) return <ErrorStep key="error" />;
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω—ã–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç currentStep
        switch (currentStep) {
            case 1:
                return <StepWelcome key="step1" />;
            case 2:
                return <StepPersonalInfo key="step2" />;
            case 3:
                return <StepInterestsAndBio key="step3" />;
            default:
                return null;
        }
    };

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä
    return (
        <div 
            className={`registration-container ${theme === 'dark' ? 'dark-theme' : 'light-theme'}`}
            ref={formContainerRef}
        >
            {!success && !error && (
                <div className="form-header">
                    <div className="form-progress">
                        {Array.from({ length: totalSteps }).map((_, index) => (
                            <div className="step-wrapper" key={index}>
                                <div 
                                    className={`step-indicator ${
                                        index + 1 === currentStep ? 'active' : 
                                        index + 1 < currentStep ? 'completed' : ''
                                    }`}
                                >
                                    {index + 1 < currentStep ? (
                                        <span className="step-check">‚úì</span>
                                    ) : (
                                        <span className="step-number">{index + 1}</span>
                                    )}
                                </div>
                                <span className="step-label">
                                    {index === 0 ? '–ò–º—è' : 
                                     index === 1 ? '–õ–∏—á–Ω–æ–µ' : '–ò–Ω—Ç–µ—Ä–µ—Å—ã'}
                                </span>
                            </div>
                        ))}
                        <div 
                            className="progress-line" 
                            style={{ width: `${calculateProgress() - 33}%` }}
                        ></div>
                    </div>
                </div>
            )}
            
            <div className="form-step-container">
                <AnimatePresence mode="wait" initial={false}>
                    {getStepContent()}
                </AnimatePresence>
            </div>
        </div>
    );
};

export default RegistrationForm;