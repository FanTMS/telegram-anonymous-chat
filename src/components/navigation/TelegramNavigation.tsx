import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import WebApp from '@twa-dev/sdk';

interface NavigationItem {
    name: string;
    path: string;
    icon: string;
    badge?: number;
}

interface TelegramNavigationProps {
    className?: string;
}

export const TelegramNavigation: React.FC<TelegramNavigationProps> = ({ className = '' }) => {
    const location = useLocation();
    const [colorScheme, setColorScheme] = useState<'light' | 'dark'>(
        WebApp.colorScheme === 'dark' ? 'dark' : 'light'
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã Telegram
    useEffect(() => {
        const handleThemeChange = () => {
            setColorScheme(WebApp.colorScheme === 'dark' ? 'dark' : 'light');
        };

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã (–µ—Å–ª–∏ –±—ã —Ç–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ)
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã

        return () => {
            // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        };
    }, []);

    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navigationItems: NavigationItem[] = [
        { name: '–ß–∞—Ç—ã', path: '/chats', icon: 'üí¨' },
        { name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', path: '/contacts', icon: 'üë•' },
        { name: '–ü–æ–∏—Å–∫', path: '/search', icon: 'üîç' },
        { name: '–ü—Ä–æ—Ñ–∏–ª—å', path: '/profile', icon: 'üë§' },
        { name: '–ë–æ—Ç', path: '/bot-chat', icon: 'ü§ñ' },
    ];

    return (
        <nav className={`telegram-navigation ${colorScheme} ${className}`}>
            <div className="navigation-container">
                {navigationItems.map((item) => {
                    const isActive = location.pathname === item.path;
                    return (
                        <Link
                            key={item.path}
                            to={item.path}
                            className={`nav-item ${isActive ? 'active' : ''}`}
                        >
                            <div className="nav-icon">{item.icon}</div>
                            <div className="nav-label">{item.name}</div>
                            {item.badge && item.badge > 0 && (
                                <div className="nav-badge">{item.badge}</div>
                            )}
                        </Link>
                    );
                })}
            </div>
        </nav>
    );
};
