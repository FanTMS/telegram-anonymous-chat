import React, { useState, useEffect, useRef } from 'react';
import OnboardingTutorial from '../components/OnboardingTutorial';
import { initTelegramApp, isTelegramApp, triggerHapticFeedback } from '../utils/telegramUtils';
import '../styles/BeginnerGuide.css';

const BeginnerGuide = () => {
    const [tutorialCompleted, setTutorialCompleted] = useState(false);
    const [isLoading, setIsLoading] = useState(true);
    const [isTelegram, setIsTelegram] = useState(false);
    const [showConfetti, setShowConfetti] = useState(false);
    const [darkMode, setDarkMode] = useState(false);
    const progressBarRef = useRef(null);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Telegram
    useEffect(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram
        const telegramApp = isTelegramApp();
        setIsTelegram(telegramApp);

        // –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        if (telegramApp) {
            initTelegramApp();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É Telegram
            if (window.Telegram?.WebApp) {
                setDarkMode(window.Telegram.WebApp.colorScheme === 'dark');
            }
        } else {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            setDarkMode(prefersDark);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Ä–∞–Ω–µ–µ
        const completed = localStorage.getItem('tutorial_completed') === 'true';
        setTutorialCompleted(completed);

        // –ü–ª–∞–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        const timer = setTimeout(() => {
            setIsLoading(false);
        }, 600);

        return () => clearTimeout(timer);
    }, []);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        if (!isLoading && progressBarRef.current) {
            progressBarRef.current.style.width = '100%';
        }
    }, [isLoading]);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
    useEffect(() => {
        if (tutorialCompleted && !localStorage.getItem('confetti_shown')) {
            setShowConfetti(true);
            localStorage.setItem('confetti_shown', 'true');

            // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            const timer = setTimeout(() => {
                setShowConfetti(false);
            }, 5000);

            return () => clearTimeout(timer);
        }
    }, [tutorialCompleted]);

    const handleTutorialComplete = () => {
        // –•–∞–ø—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è Telegram
        if (isTelegram) {
            triggerHapticFeedback('medium');
        }

        setTutorialCompleted(true);
        localStorage.setItem('tutorial_completed', 'true');

        // –ê–Ω–∏–º–∞—Ü–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    const handleRestartTutorial = () => {
        // –•–∞–ø—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è Telegram
        if (isTelegram) {
            triggerHapticFeedback('light');
        }
        
        // –ü–ª–∞–≤–Ω–æ —Å–∫—Ä—ã—Ç—å –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —ç–∫—Ä–∞–Ω
        const completionMessage = document.querySelector('.completion-message');
        completionMessage.classList.add('slide-out');

        setTimeout(() => {
            setTutorialCompleted(false);
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–≤–µ—Ä—Ö
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }, 300);
    };
    
    const handleFindChatClick = () => {
        if (isTelegram) {
            triggerHapticFeedback('medium');
        }
        window.location.href = '/random-chat';
    };

    const handleContinueClick = () => {
        if (isTelegram) {
            triggerHapticFeedback('medium');
        }
        window.location.href = '/home';
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ —Ç–µ–º—ã
    const containerClasses = `tg-guide-container ${isTelegram ? 'in-telegram' : ''} ${darkMode ? 'dark-theme' : 'light-theme'}`;

    if (isLoading) {
        return (
            <div className={containerClasses}>
                <div className="tg-loading">
                    <div className="tg-progress-bar">
                        <div className="tg-progress-value" ref={progressBarRef}></div>
                    </div>
                    <div className="tg-loader">
                        <div className="tg-loader-spinner"></div>
                    </div>
                    <p className="tg-loader-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞</p>
                </div>
            </div>
        );
    }

    return (
        <div className={containerClasses}>
            <div className="tg-guide-header">
                <h1>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –æ–±—â–µ–Ω–∏—é –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ</h1>
                <div className="tg-header-line"></div>
            </div>

            {!tutorialCompleted ? (
                <div className="tg-tutorial-wrapper">
                    <OnboardingTutorial onComplete={handleTutorialComplete} />
                </div>
            ) : (
                <div className="completion-message">
                    {showConfetti && (
                        <div className="tg-confetti">
                            {[...Array(30)].map((_, i) => (
                                <div 
                                    key={i} 
                                    className="tg-confetti-piece" 
                                    style={{
                                        left: `${Math.random() * 100}%`,
                                        animationDelay: `${Math.random() * 3}s`,
                                        backgroundColor: `hsl(${Math.random() * 360}, 80%, 60%)`
                                    }}
                                ></div>
                            ))}
                        </div>
                    )}
                    
                    <div className="tg-completion-card">
                        <div className="tg-completion-badge">
                            <span>‚úì</span>
                        </div>
                        
                        <h2>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h2>
                        <p className="tg-completion-subtitle">–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</p>
                        
                        <div className="tg-principles">
                            <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—â–µ–Ω–∏—è:</h3>
                            <div className="tg-principles-grid">
                                <div className="tg-principle-item">
                                    <div className="tg-principle-icon respect">üë§</div>
                                    <p>–£–≤–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É</p>
                                </div>
                                <div className="tg-principle-item">
                                    <div className="tg-principle-icon questions">‚ùì</div>
                                    <p>–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</p>
                                </div>
                                <div className="tg-principle-item">
                                    <div className="tg-principle-icon interest">üëÇ</div>
                                    <p>–ò—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å</p>
                                </div>
                                <div className="tg-principle-item">
                                    <div className="tg-principle-icon positivity">üòä</div>
                                    <p>–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π</p>
                                </div>
                            </div>
                        </div>
                        
                        <p className="tg-completion-message">
                            –¢–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏—è—Ç–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é –∏ –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º!
                        </p>
                    </div>
                    
                    <div className="tg-action-buttons">
                        <button
                            className="tg-button tg-button-secondary"
                            onClick={handleRestartTutorial}
                        >
                            <span className="tg-button-icon">‚Ü∫</span>
                            –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞
                        </button>
                        <button
                            className="tg-button tg-button-primary"
                            onClick={handleContinueClick}
                        >
                            <span className="tg-button-icon">‚Üí</span>
                            –ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É
                        </button>
                    </div>
                    
                    <div className="tg-find-chat">
                        <button 
                            className="tg-find-chat-button"
                            onClick={handleFindChatClick}
                        >
                            <span className="tg-find-icon">üîç</span>
                            –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                        </button>
                    </div>
                </div>
            )}

            {/* SafeArea –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å "—á–µ–ª–∫–∞–º–∏" –∏ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ */}
            <div className="tg-safe-area-bottom"></div>
        </div>
    );
};

export default BeginnerGuide;
