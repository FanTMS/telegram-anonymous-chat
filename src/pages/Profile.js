import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { updateUser, getUserById } from '../utils/userService';
import { safeHapticFeedback, safeShowPopup } from '../utils/telegramWebAppUtils';
import { getUserStatistics } from '../utils/statisticsService';
import InterestSelector from '../components/InterestSelector';
import '../styles/Profile.css';
import { auth } from '../firebase';

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
const PREDEFINED_INTERESTS = [
    { id: 'music', name: '–ú—É–∑—ã–∫–∞', icon: 'üéµ' },
    { id: 'sports', name: '–°–ø–æ—Ä—Ç', icon: '‚öΩ' },
    { id: 'gaming', name: '–ò–≥—Ä—ã', icon: 'üéÆ' },
    { id: 'movies', name: '–ö–∏–Ω–æ', icon: 'üé¨' },
    { id: 'books', name: '–ö–Ω–∏–≥–∏', icon: 'üìö' },
    { id: 'travel', name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', icon: '‚úàÔ∏è' },
    { id: 'cooking', name: '–ö—É–ª–∏–Ω–∞—Ä–∏—è', icon: 'üç≥' },
    { id: 'tech', name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', icon: 'üíª' },
    { id: 'art', name: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', icon: 'üé®' },
    { id: 'nature', name: '–ü—Ä–∏—Ä–æ–¥–∞', icon: 'üå≤' },
    { id: 'science', name: '–ù–∞—É–∫–∞', icon: 'üî¨' },
    { id: 'history', name: '–ò—Å—Ç–æ—Ä–∏—è', icon: 'üèõÔ∏è' }
];

const Profile = () => {
    const [formData, setFormData] = useState({
        name: '',
        age: '',
        gender: '',
        interests: [],
        bio: ''
    });

    const [userStats, setUserStats] = useState({
        totalChats: 0,
        completedChats: 0,
        totalMessages: 0,
        activeChats: 0
    });

    const [isEditing, setIsEditing] = useState(false);
    const [isSaving, setIsSaving] = useState(false);
    const [error, setError] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    const navigate = useNavigate();

    useEffect(() => {
        const loadUserProfile = async () => {
            try {
                setIsLoading(true);
                setError(null);

                // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase Auth
                const currentUser = auth.currentUser;
                const currentUserId = currentUser?.uid || localStorage.getItem('current_user_id');

                if (!currentUserId) {
                    console.error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
                    redirectToRegistration();
                    return;
                }

                console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID:', currentUserId);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
                const userDoc = await getUserById(currentUserId);
                
                if (!userDoc) {
                    console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                    setError('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.');
                    redirectToRegistration();
                    return;
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                setFormData({
                    name: userDoc.name || '',
                    age: userDoc.age || '',
                    gender: userDoc.gender || '',
                    interests: userDoc.interests || [],
                    bio: userDoc.bio || userDoc.aboutMe || ''
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                setUserStats({
                    totalChats: userDoc.chatsCount || 0,
                    completedChats: userDoc.completedChatsCount || 0,
                    totalMessages: userDoc.messagesCount || 0,
                    activeChats: userDoc.activeChatsCount || 0
                });

                setIsLoading(false);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
                setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                setIsLoading(false);
            }
        };

        const redirectToRegistration = () => {
            setIsLoading(false);
            // –û—á–∏—â–∞–µ–º localStorage –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
            localStorage.removeItem('current_user');
            localStorage.removeItem('current_user_id');
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                navigate('/register');
            }, 2000);
        };

        loadUserProfile();
    }, [navigate]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º useCallback –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const handleInterestsChange = useCallback((newInterests) => {
        setFormData(prev => ({
            ...prev,
            interests: newInterests
        }));
    }, []);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
    const getUserInitials = () => {
        if (!formData.name) return '?';

        return formData.name
            .split(' ')
            .map(part => part.charAt(0).toUpperCase())
            .join('')
            .substring(0, 2);
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const formatInterests = useCallback(() => {
        if (!formData.interests || formData.interests.length === 0) {
            return [];
        }

        // –ï—Å–ª–∏ interests - —ç—Ç–æ –º–∞—Å—Å–∏–≤ id, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        return formData.interests.map(interest => {
            if (typeof interest === 'string') {
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –≤ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö
                const predefined = PREDEFINED_INTERESTS.find(i => i.id === interest);
                return predefined || { id: interest, name: interest };
            }
            return interest;
        });
    }, [formData.interests]);

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const renderInterests = () => {
        if (!formData.interests) return null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ interests –º–∞—Å—Å–∏–≤–æ–º
        const interestsArray = Array.isArray(formData.interests)
            ? formData.interests
            : typeof formData.interests === 'string'
                ? formData.interests.split(',').map(interest => interest.trim())
                : [];

        if (interestsArray.length === 0) {
            return <div className="empty-interests">–ò–Ω—Ç–µ—Ä–µ—Å—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã</div>;
        }

        return (
            <div className="interests-list">
                {interestsArray.map((interest, index) => {
                    // –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å - —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ name, –∏–Ω–∞—á–µ —Å–∞–º –∏–Ω—Ç–µ—Ä–µ—Å
                    const interestName = typeof interest === 'object' ? interest.name : interest;
                    return (
                        <span key={index} className="interest-tag">
                            {interestName}
                        </span>
                    );
                })}
            </div>
        );
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSaving(true);
        setError(null);

        try {
            // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ Firebase Auth –∏–ª–∏ –∏–∑ localStorage –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            const currentUser = auth.currentUser;
            const currentUserId = currentUser?.uid || localStorage.getItem('current_user_id');
            
            if (!currentUserId) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const dataToUpdate = {
                name: formData.name,
                age: formData.age ? parseInt(formData.age) : null,
                gender: formData.gender,
                interests: formData.interests,
                bio: formData.bio,
                updatedAt: new Date().toISOString()
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
            await updateUser(currentUserId, dataToUpdate);

            // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            safeHapticFeedback('notification', null, 'success');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await safeShowPopup({
                title: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω',
                message: '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
                buttons: [{ text: "–û–ö" }]
            });

            setIsEditing(false);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', err);
            setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');

            // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            safeHapticFeedback('notification', null, 'error');
        } finally {
            setIsSaving(false);
        }
    };

    if (isLoading) {
        return (
            <div className="profile-loading">
                <div className="profile-loading-spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
            </div>
        );
    }

    return (
        <div className="profile-container">
            <div className="profile-header">
                <div className="profile-avatar-wrapper">
                    <div className="profile-avatar">
                        {getUserInitials()}
                    </div>
                    {isEditing && (
                        <div className="profile-avatar-edit">‚úèÔ∏è</div>
                    )}
                </div>
                <div className="profile-title-area">
                    <h2 className="profile-title">{isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è' : formData.name || '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'}</h2>
                    <p className="profile-subtitle">
                        {formData.age ? `${formData.age} –ª–µ—Ç` : '–í–æ–∑—Ä–∞—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'}
                    </p>
                </div>
            </div>

            {error && <div className="profile-error">{error}</div>}

            {!isEditing && (
                <div className="profile-stats">
                    <div className="stat-card">
                        <div className="stat-value">{userStats.totalChats || 0}</div>
                        <div className="stat-label">–í—Å–µ–≥–æ —á–∞—Ç–æ–≤</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-value">{userStats.completedChats || 0}</div>
                        <div className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-value">{userStats.totalMessages || 0}</div>
                        <div className="stat-label">–°–æ–æ–±—â–µ–Ω–∏–π</div>
                    </div>
                    <div className="stat-card">
                        <div className="stat-value">{userStats.activeChats || 0}</div>
                        <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
                    </div>
                </div>
            )}

            {isEditing ? (
                <form className="profile-form" onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label htmlFor="name">–ò–º—è/–ü—Å–µ–≤–¥–æ–Ω–∏–º</label>
                        <input
                            type="text"
                            id="name"
                            name="name"
                            className="tg-input"
                            value={formData.name}
                            onChange={handleChange}
                            placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è"
                            maxLength={50}
                            required
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="age">–í–æ–∑—Ä–∞—Å—Ç</label>
                        <input
                            type="number"
                            id="age"
                            name="age"
                            className="tg-input"
                            value={formData.age}
                            onChange={handleChange}
                            placeholder="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç"
                            min={16}
                            max={99}
                        />
                    </div>

                    <div className="form-group">
                        <label>–ü–æ–ª</label>
                        <div className="gender-selector">
                            <label className="gender-option">
                                <input
                                    type="radio"
                                    name="gender"
                                    value="male"
                                    checked={formData.gender === 'male'}
                                    onChange={handleChange}
                                />
                                <span>–ú—É–∂—Å–∫–æ–π</span>
                            </label>
                            <label className="gender-option">
                                <input
                                    type="radio"
                                    name="gender"
                                    value="female"
                                    checked={formData.gender === 'female'}
                                    onChange={handleChange}
                                />
                                <span>–ñ–µ–Ω—Å–∫–∏–π</span>
                            </label>
                            <label className="gender-option">
                                <input
                                    type="radio"
                                    name="gender"
                                    value="other"
                                    checked={formData.gender === 'other'}
                                    onChange={handleChange}
                                />
                                <span>–î—Ä—É–≥–æ–π</span>
                            </label>
                        </div>
                    </div>

                    <div className="form-group">
                        <label>–ò–Ω—Ç–µ—Ä–µ—Å—ã</label>
                        <InterestSelector
                            value={formData.interests}
                            onChange={handleInterestsChange}
                        />
                    </div>

                    <div className="form-group">
                        <label htmlFor="bio">–û —Å–µ–±–µ</label>
                        <textarea
                            id="bio"
                            name="bio"
                            className="tg-textarea"
                            value={formData.bio}
                            onChange={handleChange}
                            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ"
                            rows={4}
                            maxLength={500}
                        />
                    </div>

                    <div className="form-actions">
                        <button
                            type="button"
                            className="tg-button tg-button-secondary"
                            onClick={() => setIsEditing(false)}
                            disabled={isSaving}
                        >
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button
                            type="submit"
                            className="tg-button"
                            disabled={isSaving}
                        >
                            {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                        </button>
                    </div>
                </form>
            ) : (
                <div className="profile-info">
                    <div className="profile-section">
                        <h3 className="profile-section-title">–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                        <div className="info-card">
                            <div className="info-row">
                                <span className="info-label">–ò–º—è/–ü—Å–µ–≤–¥–æ–Ω–∏–º:</span>
                                <span className="info-value">{formData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                            </div>
                            <div className="info-row">
                                <span className="info-label">–í–æ–∑—Ä–∞—Å—Ç:</span>
                                <span className="info-value">{formData.age ? `${formData.age} –ª–µ—Ç` : '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                            </div>
                            <div className="info-row">
                                <span className="info-label">–ü–æ–ª:</span>
                                <span className="info-value">
                                    {formData.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' :
                                     formData.gender === 'female' ? '–ñ–µ–Ω—Å–∫–∏–π' :
                                     formData.gender === 'other' ? '–î—Ä—É–≥–æ–π' : '–ù–µ —É–∫–∞–∑–∞–Ω'}
                                </span>
                            </div>
                            <div className="info-row">
                                <span className="info-label">–ò–Ω—Ç–µ—Ä–µ—Å—ã:</span>
                                <div className="info-value">
                                    {renderInterests()}
                                </div>
                            </div>
                            {formData.bio && (
                                <div className="info-row about-me-row">
                                    <span className="info-label">–û —Å–µ–±–µ:</span>
                                    <span className="info-value">{formData.bio}</span>
                                </div>
                            )}
                        </div>
                    </div>

                    <button
                        className="tg-button edit-profile-button"
                        onClick={() => {
                            safeHapticFeedback('selection');
                            setIsEditing(true);
                        }}
                    >
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                    </button>

                    <div className="app-info">
                        <div className="app-name">–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</div>
                        <div className="app-version">–í–µ—Ä—Å–∏—è 1.0.0</div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Profile;
