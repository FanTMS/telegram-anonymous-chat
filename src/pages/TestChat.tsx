import React, { useState, useEffect } from 'react';
import { Card } from '../components/Card';
import { Button } from '../components/Button';
import {
    startSearching, stopSearching, isUserSearching, startMatchmakingService, stopMatchmakingService,
    getSearchingUsers, getChatById, getNewChatNotification, hasNewChat, markChatNotificationAsRead
} from '../utils/matchmaking';
import { getCurrentUser, createUser, getUserById } from '../utils/user';
import { useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { v4 as uuidv4 } from 'uuid';
import { ActiveSearchCounter } from '../components/ActiveSearchCounter';

export const TestChat = () => {
    const navigate = useNavigate();
    const [usersList, setUsersList] = useState<string[]>([]);
    const [testingUsers, setTestingUsers] = useState<{ id: string, name: string }[]>([]);
    const [activeUser, setActiveUser] = useState<string | null>(null);
    const [searchingUsers, setSearchingUsers] = useState<any[]>([]);
    const [generatedChats, setGeneratedChats] = useState<any[]>([]);
    const [logMessages, setLogMessages] = useState<string[]>([]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    useEffect(() => {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        createTestUsers();

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        updateSearchingUsers();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–æ–≤
        const chatFoundHandler = (event: CustomEvent) => {
            addLogMessage(`üì¢ –°–æ–±—ã—Ç–∏–µ chatFound: –°–æ–∑–¥–∞–Ω —á–∞—Ç ${event.detail.chatId}`);
            updateGeneratedChats();
        };

        window.addEventListener('chatFound', chatFoundHandler as EventListener);

        // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ
        const intervalId = setInterval(updateSearchingUsers, 2000);

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            window.removeEventListener('chatFound', chatFoundHandler as EventListener);
            clearInterval(intervalId);
        };
    }, []);

    // –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
    const addLogMessage = (message: string) => {
        setLogMessages(prev => [message, ...prev].slice(0, 20));
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const createTestUsers = () => {
        const users = [];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        const existingUsers = getAllTestUsers();

        if (existingUsers.length === 0) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for (let i = 1; i <= 5; i++) {
                const id = `test-user-${uuidv4().substring(0, 8)}`;
                const name = `–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${i}`;
                const user = createUser(id, name);
                users.push({ id, name });
            }
            setTestingUsers(users);
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            setTestingUsers(existingUsers.map(id => {
                const user = getUserById(id);
                return { id, name: user?.name || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id}` };
            }));
        }

        addLogMessage('üë§ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã/–∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const getAllTestUsers = (): string[] => {
        try {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∏–∑ localStorage
            const keys = Object.keys(localStorage);

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            const userKeys = keys.filter(key => key.startsWith('user_'));

            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return userKeys.map(key => key.replace('user_', ''))
                .filter(id => {
                    const user = getUserById(id);
                    return user !== null && (id.startsWith('test-user-') || user.name?.includes('–¢–µ—Å—Ç–æ–≤—ã–π'));
                });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return [];
        }
    };

    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ
    const updateSearchingUsers = () => {
        const users = getSearchingUsers();
        setSearchingUsers(users);
    };

    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    const updateGeneratedChats = () => {
        try {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∏–∑ localStorage
            const keys = Object.keys(localStorage);

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ —á–∞—Ç–∞–º
            const chatKeys = keys.filter(key => key.startsWith('chat_'));

            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤
            const chats = chatKeys.map(key => {
                try {
                    const chatJson = localStorage.getItem(key);
                    if (chatJson) {
                        return JSON.parse(chatJson);
                    }
                    return null;
                } catch {
                    return null;
                }
            }).filter(chat => chat !== null);

            setGeneratedChats(chats);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤:', error);
        }
    };

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const selectUser = (userId: string) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
        localStorage.setItem('current_user_id', userId);
        setActiveUser(userId);
        addLogMessage(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    };

    // –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const startSearch = (userId: string, isRandom: boolean = true, interests: string[] = []) => {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selectUser(userId);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        const success = startSearching(isRandom, interests);

        if (success) {
            addLogMessage(`üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ (—Ä–µ–∂–∏–º: ${isRandom ? '—Å–ª—É—á–∞–π–Ω—ã–π' : '–ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º'})`);
            updateSearchingUsers();
        } else {
            addLogMessage(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        }
    };

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const stopSearch = (userId: string) => {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selectUser(userId);

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
        const success = stopSearching(userId);

        if (success) {
            addLogMessage(`‚èπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ–∏—Å–∫`);
            updateSearchingUsers();
        } else {
            addLogMessage(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–æ–∏—Å–∫–µ
    const checkIsSearching = (userId: string) => {
        return searchingUsers.some(user => user.userId === userId);
    };

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä
    const startMatchmaking = () => {
        const serviceId = startMatchmakingService(1500);
        addLogMessage(`üöÄ –ó–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–∏—Å –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä —Å ID: ${serviceId}`);
    };

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä
    const stopMatchmaking = () => {
        // @ts-ignore
        if (window._matchmakingIntervalId) {
            // @ts-ignore
            stopMatchmakingService(window._matchmakingIntervalId);
            addLogMessage(`üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä`);
        } else {
            addLogMessage(`‚ùì –°–µ—Ä–≤–∏—Å –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω`);
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const checkNewChats = (userId: string) => {
        selectUser(userId);

        if (hasNewChat(userId)) {
            const notification = getNewChatNotification(userId);
            if (notification) {
                addLogMessage(`üéâ –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${notification.chatId}`);
                return notification.chatId;
            }
        }

        addLogMessage(`‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return null;
    };

    // –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç
    const goToChat = (chatId: string) => {
        if (!chatId) {
            addLogMessage(`‚ùå –û—à–∏–±–∫–∞: ID —á–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            return;
        }

        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–∞—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ ID
        const normalizedChatId = chatId.startsWith('chat_') ? chatId.substring(5) : chatId;
        const fullChatId = chatId.startsWith('chat_') ? chatId : `chat_${chatId}`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç —Å –æ–¥–Ω–∏–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ID
        let chat = getChatById(chatId);
        if (!chat) {
            chat = getChatById(normalizedChatId);
        }
        if (!chat) {
            chat = getChatById(fullChatId);
        }

        if (!chat) {
            addLogMessage(`‚ùå –û—à–∏–±–∫–∞: –ß–∞—Ç —Å ID ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π ID —á–∞—Ç–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "chat_" –≤ localStorage
        // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —á–∞—Å—Ç—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const storageId = chat.id.startsWith('chat_') ? chat.id : `chat_${chat.id}`;
        localStorage.setItem('active_chat_id', storageId);

        // –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "chat_", –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Chat
        const navigationId = chat.id.startsWith('chat_') ? chat.id.substring(5) : chat.id;

        addLogMessage(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Ç: ${navigationId} (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID: ${chat.id})`);
        navigate(`/chat/${navigationId}`);
    };

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
    const showSearchStats = () => {
        const stats = {
            totalUsers: testingUsers.length,
            searchingUsers: searchingUsers.length,
            generatedChats: generatedChats.length
        };

        addLogMessage(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${JSON.stringify(stats)}`);
    };

    // –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–∞—Ç–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    const markAsRead = (userId: string) => {
        selectUser(userId);
        markChatNotificationAsRead(userId);
        addLogMessage(`‚úì –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${userId} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`);
    };

    return (
        <div className="container mx-auto p-4 max-w-4xl">
            <h1 className="text-2xl font-bold mb-6">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤</h1>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
                <div className="space-y-6">
                    {/* –ë–ª–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
                    <Card className="p-4">
                        <h2 className="text-lg font-semibold mb-3">–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
                        <div className="space-y-3">
                            {testingUsers.map(user => (
                                <div key={user.id} className="p-3 border rounded-lg flex justify-between items-center bg-white dark:bg-gray-800 shadow-sm">
                                    <div>
                                        <div className="font-medium">{user.name}</div>
                                        <div className="text-xs text-gray-500 truncate">{user.id}</div>
                                    </div>
                                    <div className="flex space-x-2">
                                        <Button
                                            onClick={() => selectUser(user.id)}
                                            variant={activeUser === user.id ? "primary" : "outline"}
                                            size="small"
                                            className="text-xs"
                                        >
                                            –í—ã–±—Ä–∞—Ç—å
                                        </Button>
                                        {checkIsSearching(user.id) ? (
                                            <Button
                                                onClick={() => stopSearch(user.id)}
                                                variant="outline"
                                                size="small"
                                                className="bg-red-100 text-red-700 border-red-300 text-xs"
                                            >
                                                –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                                            </Button>
                                        ) : (
                                            <Button
                                                onClick={() => startSearch(user.id)}
                                                variant="outline"
                                                size="small"
                                                className="bg-green-100 text-green-700 border-green-300 text-xs"
                                            >
                                                –ò—Å–∫–∞—Ç—å
                                            </Button>
                                        )}
                                    </div>
                                </div>
                            ))}
                        </div>

                        <div className="mt-4 flex items-center justify-between">
                            <ActiveSearchCounter className="text-sm" refreshIntervalMs={2000} />

                            <div className="flex space-x-2">
                                <Button onClick={() => createTestUsers()} size="small">–û–±–Ω–æ–≤–∏—Ç—å</Button>
                                <Button
                                    onClick={showSearchStats}
                                    variant="outline"
                                    size="small"
                                >
                                    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                                </Button>
                            </div>
                        </div>
                    </Card>

                    {/* –ë–ª–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º */}
                    <Card className="p-4">
                        <h2 className="text-lg font-semibold mb-3">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–º</h2>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                            <Button onClick={startMatchmaking} className="bg-blue-500 hover:bg-blue-600 text-white">
                                –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥–±–æ—Ä
                            </Button>
                            <Button onClick={stopMatchmaking} className="bg-red-500 hover:bg-red-600 text-white">
                                –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–±–æ—Ä
                            </Button>
                            <Button
                                onClick={() => {
                                    const userId1 = testingUsers[0]?.id;
                                    const userId2 = testingUsers[1]?.id;
                                    if (userId1 && userId2) {
                                        startSearch(userId1);
                                        startSearch(userId2);
                                        addLogMessage(`üîÑ –ó–∞–ø—É—â–µ–Ω –ø–æ–∏—Å–∫ –¥–ª—è –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userId1} –∏ ${userId2}`);
                                    }
                                }}
                                className="bg-green-500 hover:bg-green-600 text-white col-span-2"
                            >
                                –¢–µ—Å—Ç: –ü–æ–∏—Å–∫ –¥–ª—è 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            </Button>
                        </div>
                    </Card>
                </div>

                {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
                <div className="space-y-6">
                    {/* –ë–ª–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ */}
                    <Card className="p-4">
                        <h2 className="text-lg font-semibold mb-3">–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏</h2>
                        {searchingUsers.length > 0 ? (
                            <div className="space-y-2">
                                {searchingUsers.map(user => (
                                    <div key={user.userId} className="p-2 border rounded flex justify-between items-center text-sm bg-yellow-50 dark:bg-yellow-900/20">
                                        <div className="truncate">
                                            <span className="font-medium">{user.userId}</span>
                                            <span className="text-xs ml-2 text-gray-500">
                                                {new Date(user.startedAt).toLocaleTimeString()}
                                            </span>
                                        </div>
                                        <Button
                                            onClick={() => stopSearch(user.userId)}
                                            variant="outline"
                                            size="small"
                                            className="text-xs py-1 px-2 h-auto"
                                        >
                                            –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                                        </Button>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div className="text-center py-4 text-gray-500">
                                –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
                            </div>
                        )}
                    </Card>

                    {/* –ë–ª–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ */}
                    <Card className="p-4">
                        <h2 className="text-lg font-semibold mb-3">–°–æ–∑–¥–∞–Ω–Ω—ã–µ —á–∞—Ç—ã</h2>
                        <Button onClick={updateGeneratedChats} variant="outline" size="small" className="mb-3 w-full">
                            –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                        </Button>

                        {generatedChats.length > 0 ? (
                            <div className="space-y-3 max-h-64 overflow-y-auto">
                                {generatedChats.map((chat, index) => (
                                    <div key={index} className="p-3 border rounded-lg bg-white dark:bg-gray-800 shadow-sm">
                                        <div className="flex justify-between items-center">
                                            <div className="font-medium truncate">{chat.id}</div>
                                            <Button onClick={() => goToChat(chat.id)} size="small" className="text-xs">
                                                –ü–µ—Ä–µ–π—Ç–∏
                                            </Button>
                                        </div>
                                        <div className="text-xs text-gray-500 mt-1">
                                            –£—á–∞—Å—Ç–Ω–∏–∫–∏: {chat.participants ? chat.participants.join(', ') : '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}
                                        </div>
                                        <div className="text-xs text-gray-500 mt-1">
                                            –°–æ–∑–¥–∞–Ω: {new Date(chat.createdAt).toLocaleString()}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div className="text-center py-4 text-gray-500">
                                –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
                            </div>
                        )}
                    </Card>
                </div>
            </div>

            {/* –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π */}
            <Card className="p-4 mt-6">
                <h2 className="text-lg font-semibold mb-3 flex justify-between items-center">
                    <span>–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π</span>
                    <Button onClick={() => setLogMessages([])} variant="outline" size="small">–û—á–∏—Å—Ç–∏—Ç—å</Button>
                </h2>
                <div className="border rounded-lg bg-black text-green-400 p-3 h-40 overflow-y-auto font-mono text-sm">
                    {logMessages.length > 0 ? (
                        <AnimatePresence>
                            {logMessages.map((msg, index) => (
                                <motion.div
                                    key={index}
                                    initial={{ opacity: 0, y: -10 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    exit={{ opacity: 0 }}
                                    transition={{ duration: 0.3 }}
                                    className="mb-1"
                                >
                                    <span className="text-gray-500">[{new Date().toLocaleTimeString()}]</span> {msg}
                                </motion.div>
                            ))}
                        </AnimatePresence>
                    ) : (
                        <div className="text-gray-500 italic">–ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç</div>
                    )}
                </div>
            </Card>

            {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
            <div className="mt-6">
                <Button onClick={() => navigate('/')} variant="outline" className="w-full">
                    ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
                </Button>
            </div>
        </div>
    );
};
