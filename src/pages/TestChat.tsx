import React, { useState, useEffect } from 'react';
import { Card } from '../components/Card';
import { Button } from '../components/Button';
import { createTestUser, getCurrentUser, getUserById } from '../utils/user';
import { getChatById } from '../utils/chat'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º getChatById –∏–∑ chat.ts
import { getNewChatNotification, getSearchingUsers, hasNewChat, saveNewChatNotification, startSearching, stopSearching, triggerMatchmaking } from '../utils/matchmaking';
import { useNavigate } from 'react-router-dom';

export const TestChat = () => {
    const navigate = useNavigate();
    const [testUsers, setTestUsers] = useState<any[]>([]);
    const [logs, setLogs] = useState<string[]>([]);
    const [searchingUsers, setSearchingUsers] = useState<any[]>([]);
    const [showDetailedLogs, setShowDetailedLogs] = useState(false);
    const [autoSearching, setAutoSearching] = useState(false);
    const [autoSearchInterval, setAutoSearchInterval] = useState<NodeJS.Timeout | null>(null);
    const [chats, setChats] = useState<any[]>([]);

    useEffect(() => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        loadExistingUsers();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        checkExistingChats();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        const interval = setInterval(() => {
            const users = getSearchingUsers();

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            const usersWithNames = users.map(user => {
                const userData = getUserById(user.userId);
                return {
                    ...user,
                    name: userData?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
                };
            });

            setSearchingUsers(usersWithNames);
        }, 1000);

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ chatFound –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤
        const handleChatFound = (event: any) => {
            const { chatId, userId } = event.detail;
            addLog(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ chatFound: chatId=${chatId}, userId=${userId || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);

            // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
            setTimeout(() => checkExistingChats(), 500);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω —á–∞—Ç
            const chat = getChatById(chatId);
            if (chat) {
                addLog(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ ${chatId} –º–µ–∂–¥—É: ${chat.participants.join(' –∏ ')}`);
            } else {
                addLog(`‚ùå –û–®–ò–ë–ö–ê: –ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è chatFound!`);
            }
        };

        window.addEventListener('chatFound', handleChatFound);

        return () => {
            clearInterval(interval);
            if (autoSearchInterval) {
                clearInterval(autoSearchInterval);
            }
            window.removeEventListener('chatFound', handleChatFound);
        };
    }, []);

    const loadExistingUsers = () => {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage
            const usersStr = localStorage.getItem('users');
            if (usersStr) {
                const allUsers = JSON.parse(usersStr);
                if (Array.isArray(allUsers) && allUsers.length > 0) {
                    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    const testUsers = allUsers.filter(user =>
                        user.id.startsWith('test_') || user.name.startsWith('–¢–µ—Å—Ç')
                    );
                    setTestUsers(testUsers);

                    if (testUsers.length > 0) {
                        addLog(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${testUsers.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
                    }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            addLog('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        }
    };

    const addLog = (message: string) => {
        const timestamp = new Date().toLocaleTimeString();
        setLogs(prev => [`[${timestamp}] ${message}`, ...prev.slice(0, 99)]);
    };

    const createNewTestUser = () => {
        const name = `–¢–µ—Å—Ç${testUsers.length + 1}`;
        const user = createTestUser(name);
        if (user) {
            setTestUsers(prev => [...prev, user]);
            addLog(`–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${name} (${user.id})`);
        } else {
            addLog('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    };

    const create5TestUsers = () => {
        let created = 0;
        for (let i = 0; i < 5; i++) {
            const name = `–¢–µ—Å—Ç${testUsers.length + i + 1}`;
            const user = createTestUser(name);
            if (user) {
                created++;
                setTestUsers(prev => [...prev, user]);
            }
        }
        addLog(`–°–æ–∑–¥–∞–Ω–æ ${created} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    };

    const startTestUserSearch = (userId: string) => {
        const success = startSearching(true, [], [0, 100], userId);
        if (success) {
            addLog(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫`);

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
                triggerMatchmaking()
                    .then(result => {
                        addLog(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞: ${result ? '–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ' : '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
                    })
                    .catch(err => {
                        addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞: ${err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                    });
            }, 1000);
        } else {
            addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è ${userId}`);
        }
    };

    const stopTestUserSearch = (userId: string) => {
        const success = stopSearching(userId);
        if (success) {
            addLog(`–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${userId}`);
        } else {
            addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è ${userId}`);
        }
    };

    const forceMatch = async () => {
        addLog('–ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä...');
        try {
            const result = await triggerMatchmaking();
            addLog(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result ? '–ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞! üéâ' : '–ü–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üòû'}`);

            if (result) {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞
                setTimeout(() => {
                    checkExistingChats();
                }, 500);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ –ø–æ—Å–ª–µ –ø–æ–¥–±–æ—Ä–∞
            const updatedUsers = getSearchingUsers();

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            const usersWithNames = updatedUsers.map(user => {
                const userData = getUserById(user.userId);
                return {
                    ...user,
                    name: userData?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
                };
            });

            setSearchingUsers(usersWithNames);

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å - –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            if (updatedUsers.length >= 2) {
                setTimeout(forceMatch, 2000);
            }
        } catch (error) {
            addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –ø–∞—Ä: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
    };

    const startAutoSearch = () => {
        if (autoSearchInterval) {
            clearInterval(autoSearchInterval);
        }

        // –°—Ç–∞–≤–∏–º –¥–≤—É—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        const interval = setInterval(() => {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (testUsers.length < 2) {
                createNewTestUser();
            }

            // –ë–µ—Ä–µ–º –¥–≤—É—Ö —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const availableUsers = testUsers.filter(user =>
                !searchingUsers.some(su => su.userId === user.id)
            );

            if (availableUsers.length >= 2) {
                const user1 = availableUsers[0];
                const user2 = availableUsers[1];

                addLog(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–∏—Å–∫: ${user1.name} –∏ ${user2.name}`);
                startSearching(true, [], [0, 100], user1.id);
                startSearching(true, [], [0, 100], user2.id);

                // –ß–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥
                setTimeout(() => {
                    triggerMatchmaking().then(result => {
                        addLog(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥: ${result ? '–£—Å–ø–µ—à–Ω–æ' : '–ù–µ—É–¥–∞—á–Ω–æ'}`);
                    });
                }, 1000);
            } else {
                addLog('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞');
                create5TestUsers();
            }
        }, 5000);

        setAutoSearchInterval(interval);
        setAutoSearching(true);
        addLog('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω');
    };

    const stopAutoSearch = () => {
        if (autoSearchInterval) {
            clearInterval(autoSearchInterval);
            setAutoSearchInterval(null);
            setAutoSearching(false);
            addLog('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    };

    const clearAllUsers = () => {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        testUsers.forEach(user => {
            stopSearching(user.id);
        });

        setTestUsers([]);
        addLog('–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω');
    };

    const startSearchForAll = () => {
        if (testUsers.length === 0) {
            addLog('–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞');
            return;
        }

        for (const user of testUsers) {
            startSearching(true, [], [0, 100], user.id);
        }

        addLog(`–ó–∞–ø—É—â–µ–Ω –ø–æ–∏—Å–∫ –¥–ª—è –≤—Å–µ—Ö ${testUsers.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(forceMatch, 1000);
    };

    const goToChat = (chatId: string) => {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            const chat = getChatById(chatId);
            if (!chat) {
                addLog(`‚ùå –û—à–∏–±–∫–∞: –ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å.`);
                return;
            }

            addLog(`‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Ç ${chatId}`);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            localStorage.setItem('active_chat_id', chatId);

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —á–∞—Ç
            navigate(`/chat/${chatId}`);
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —á–∞—Ç: ${error}`);
        }
    };

    const checkExistingChats = () => {
        try {
            const chatsData = localStorage.getItem('chats');
            if (!chatsData) {
                addLog('–ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                setChats([]);
                return;
            }

            const chats = JSON.parse(chatsData);
            addLog(`–ù–∞–π–¥–µ–Ω–æ ${chats.length} —á–∞—Ç–æ–≤`);

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö
            const enhancedChats = chats.map(chat => {
                // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                const participantsDetails = chat.participants.map(participantId => {
                    const participant = getUserById(participantId);
                    return {
                        id: participantId,
                        name: participant?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                        exists: !!participant
                    };
                });

                const participant1 = participantsDetails[0];
                const participant2 = participantsDetails[1];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —á–∞—Ç–∞
                const chatIsValid = participantsDetails.every(p => p.exists) &&
                    chat.participants.length === 2;

                if (!chatIsValid) {
                    addLog(`‚ö†Ô∏è –ß–∞—Ç ${chat.id} –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: –ø—Ä–æ–±–ª–µ–º—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏–ª–∏ –∏—Ö –∫–æ–ª-–≤–æ–º`);
                }

                return {
                    ...chat,
                    participant1Name: participant1?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                    participant2Name: participant2?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                    messageCount: chat.messages?.length || 0,
                    isValid: chatIsValid
                };
            });

            setChats(enhancedChats);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const users = JSON.parse(localStorage.getItem('users') || '[]');
            for (const user of users) {
                if (hasNewChat(user.id)) {
                    const notification = getNewChatNotification(user.id);
                    if (notification) {
                        const chat = getChatById(notification.chatId);
                        if (chat) {
                            addLog(`üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} (${user.id}) –∏–º–µ–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–∞—Ç–µ ${notification.chatId}`);
                        } else {
                            addLog(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} –∏–º–µ–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —á–∞—Ç–µ ${notification.chatId}`);
                        }
                    }
                }
            }
        } catch (error) {
            addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
    };

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    const clearAllChats = () => {
        try {
            localStorage.setItem('chats', JSON.stringify([]));
            addLog('–í—Å–µ —á–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã');
            setChats([]);
        } catch (error) {
            addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
    };

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const debugState = () => {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            addLog('--- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---');

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const usersData = localStorage.getItem('users');
            const users = usersData ? JSON.parse(usersData) : [];
            addLog(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ
            const searchingUsers = getSearchingUsers();
            addLog(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ: ${searchingUsers.length}`);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–æ–≤
            const chatsData = localStorage.getItem('chats');
            const chats = chatsData ? JSON.parse(chatsData) : [];
            addLog(`–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: ${chats.length}`);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            const keys = Object.keys(localStorage);
            const notifications = keys.filter(key => key.startsWith('new_chat_notification_'));
            const flags = keys.filter(key => key.startsWith('new_chat_flag_'));

            addLog(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —á–∞—Ç–∞—Ö: ${notifications.length}`);
            addLog(`–§–ª–∞–≥–æ–≤ –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤: ${flags.length}`);

            if (flags.length > 0) {
                flags.forEach(flag => {
                    const userId = flag.replace('new_chat_flag_', '');
                    const hasChat = hasNewChat(userId);
                    addLog(`- –§–ª–∞–≥ –¥–ª—è ${userId}: ${hasChat ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
                });
            }

            addLog('--- –ö–æ–Ω–µ—Ü –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---');
        } catch (error) {
            addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
    };

    // –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    const testNavigationRoutes = () => {
        try {
            // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç
            if (chats.length === 0) {
                addLog('–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤');
                return;
            }

            const lastChat = chats[chats.length - 1];
            const chatId = lastChat.id;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
            addLog(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);

            const routesToTest = [
                `/chat/${chatId}`,
                `chat/${chatId}`,
                `../chat/${chatId}`
            ];

            for (const route of routesToTest) {
                addLog(`  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞: ${route}`);
            }

            addLog('–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ä—à—Ä—É—Ç...');
            navigate(`/chat/${chatId}`);
        } catch (error) {
            addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${error}`);
        }
    };

    // –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç

    const testChatRedirection = (chatId: string) => {
        try {
            addLog(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç ${chatId}...`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            const chat = getChatById(chatId);
            if (!chat) {
                addLog(`‚ùå –û—à–∏–±–∫–∞: –ß–∞—Ç ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞.`);
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ localStorage –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —á–∞—Ç–∞
            localStorage.setItem('active_chat_id', chatId);
            addLog(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID —á–∞—Ç–∞ –≤ localStorage: ${chatId}`);

            // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentUser = getCurrentUser();
            if (currentUser) {
                const otherUserId = chat.participants.find(id => id !== currentUser.id);

                if (otherUserId) {
                    saveNewChatNotification(currentUser.id, chatId, otherUserId);
                    addLog(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${currentUser.id}`);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
                    setTimeout(() => {
                        const hasNotification = hasNewChat(currentUser.id);
                        addLog(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ hasNewChat: ${hasNotification ? '–î–∞' : '–ù–µ—Ç'}`);

                        if (hasNotification) {
                            // –ü—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º markChatNotificationAsRead, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                            addLog(`‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}`);
                        } else {
                            addLog(`‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –≤–∏–¥–Ω–æ —á–µ—Ä–µ–∑ hasNewChat!`);
                        }
                    }, 500);
                } else {
                    addLog(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞!`);
                }
            } else {
                addLog(`‚ùå –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
            }
        } catch (error) {
            addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: ${error}`);
        }
    };

    return (
        <div className="p-4 max-w-4xl mx-auto">
            <h1 className="text-2xl font-bold mb-4">–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤</h1>

            <div className="flex flex-wrap gap-2 mb-4">
                <Button onClick={createNewTestUser} className="bg-blue-500 text-white">
                    –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                </Button>
                <Button onClick={create5TestUsers} className="bg-indigo-500 text-white">
                    –°–æ–∑–¥–∞—Ç—å 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                </Button>
                <Button onClick={startSearchForAll} className="bg-purple-500 text-white">
                    –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫ –¥–ª—è –≤—Å–µ—Ö
                </Button>
                <Button onClick={forceMatch} className="bg-green-500 text-white">
                    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥
                </Button>
                <Button onClick={autoSearching ? stopAutoSearch : startAutoSearch}
                    className={autoSearching ? "bg-red-500 text-white" : "bg-green-500 text-white"}>
                    {autoSearching ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫" : "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–æ–∏—Å–∫"}
                </Button>
                <Button onClick={clearAllUsers} className="bg-red-500 text-white">
                    –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö
                </Button>
                <Button onClick={() => navigate('/')} className="bg-gray-500 text-white">
                    –ù–∞ –≥–ª–∞–≤–Ω—É—é
                </Button>
                <Button onClick={checkExistingChats} className="bg-yellow-500 text-white">
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∞—Ç—ã
                </Button>
                <Button onClick={clearAllChats} className="bg-red-500 text-white">
                    –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç—ã
                </Button>
                <Button onClick={debugState} className="bg-indigo-500 text-white">
                    –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                </Button>
                <Button onClick={testNavigationRoutes} className="bg-pink-500 text-white">
                    –¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
                </Button>
                <Button
                    onClick={() => testChatRedirection(chats[0]?.id)}
                    className="bg-purple-500 text-white"
                    disabled={chats.length === 0}
                >
                    –¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card className="p-4">
                    <h2 className="text-xl font-bold mb-2">–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({testUsers.length})</h2>
                    <div className="divide-y max-h-60 overflow-auto">
                        {testUsers.map(user => (
                            <div key={user.id} className="py-2">
                                <div className="flex justify-between items-center">
                                    <div>
                                        <div className="font-medium">{user.name}</div>
                                        <div className="text-xs text-gray-500">{user.id}</div>
                                    </div>
                                    <div className="flex space-x-2">
                                        <Button
                                            onClick={() => startTestUserSearch(user.id)}
                                            className="bg-green-500 text-white text-xs px-2 py-1"
                                        >
                                            –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
                                        </Button>
                                        <Button
                                            onClick={() => stopTestUserSearch(user.id)}
                                            className="bg-red-500 text-white text-xs px-2 py-1"
                                        >
                                            –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                                        </Button>
                                    </div>
                                </div>
                            </div>
                        ))}
                        {testUsers.length === 0 && (
                            <div className="py-4 text-center text-gray-500">
                                –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            </div>
                        )}
                    </div>
                </Card>

                <Card className="p-4">
                    <div className="flex justify-between items-center mb-2">
                        <h2 className="text-xl font-bold">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–æ–∏—Å–∫–µ ({searchingUsers.length})</h2>
                        <Button
                            onClick={() => setShowDetailedLogs(!showDetailedLogs)}
                            className="text-xs bg-gray-200 px-2 py-1 rounded"
                        >
                            {showDetailedLogs ? "–°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏" : "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏"}
                        </Button>
                    </div>
                    <div className="text-xs overflow-auto max-h-60">
                        {showDetailedLogs ? (
                            <pre>{JSON.stringify(searchingUsers, null, 2)}</pre>
                        ) : (
                            <div className="space-y-2">
                                {searchingUsers.map((user, index) => (
                                    <div key={index} className="p-2 bg-gray-100 rounded">
                                        <div className="font-bold">{user.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}</div>
                                        <div className="text-gray-600">{user.userId}</div>
                                        <div className="text-gray-500 text-xs">
                                            –ù–∞—á–∞–ª –ø–æ–∏—Å–∫: {new Date(user.startedAt).toLocaleTimeString()}
                                        </div>
                                    </div>
                                ))}
                                {searchingUsers.length === 0 && (
                                    <div className="text-center text-gray-500">
                                        –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ
                                    </div>
                                )}
                            </div>
                        )}
                    </div>
                </Card>

                {chats.length > 0 && (
                    <Card className="p-4 md:col-span-2">
                        <div className="flex justify-between items-center mb-2">
                            <h2 className="text-xl font-bold">–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞—Ç—ã ({chats.length})</h2>
                            <Button onClick={clearAllChats} className="text-xs bg-red-500 text-white px-2 py-1 rounded">
                                –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã
                            </Button>
                        </div>
                        <div className="divide-y max-h-60 overflow-auto">
                            {chats.map(chat => (
                                <div key={chat.id} className="py-2">
                                    <div className="flex justify-between items-center">
                                        <div>
                                            <div className="font-medium">{chat.id}</div>
                                            <div className="text-xs text-gray-500">
                                                –£—á–∞—Å—Ç–Ω–∏–∫–∏: {chat.participant1Name} –∏ {chat.participant2Name}
                                            </div>
                                            <div className="text-xs text-gray-500">
                                                –°–æ–∑–¥–∞–Ω: {new Date(chat.createdAt).toLocaleString()}
                                            </div>
                                            <div className="text-xs text-gray-500">
                                                –°–æ–æ–±—â–µ–Ω–∏–π: {chat.messageCount}
                                            </div>
                                        </div>
                                        <div className="flex space-x-2">
                                            <Button
                                                onClick={() => goToChat(chat.id)}
                                                className="bg-blue-500 text-white text-xs px-2 py-1"
                                            >
                                                –û—Ç–∫—Ä—ã—Ç—å
                                            </Button>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </Card>
                )}

                <Card className="p-4 md:col-span-2">
                    <h2 className="text-xl font-bold mb-2">–õ–æ–≥–∏</h2>
                    <div className="text-xs font-mono bg-gray-100 p-2 rounded max-h-60 overflow-auto">
                        {logs.map((log, i) => (
                            <div key={i} className="mb-1">{log}</div>
                        ))}
                    </div>
                </Card>
            </div>

            <div className="mt-4 text-center">
                <Button onClick={() => navigate('/')} className="bg-gray-500 text-white">
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
                </Button>
            </div>
        </div>
    );
};

export default TestChat;
