// filepath: c:\Users\user\Desktop\Project\telegram-anonymous-chat\src\pages\admin\Production.tsx
import { useState } from 'react'
import { AdminGuard } from '../../components/AdminGuard'
import { Button } from '../../components/Button'
import { Card } from '../../components/Card'
import { prepareForProduction } from '../../utils/cleanup'
import { resetChatData } from '../../utils/reset'

export const Production = () => {
    const [isLoading, setIsLoading] = useState(false)
    const [message, setMessage] = useState<{ text: string, type: 'success' | 'error' } | null>(null)

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ production —Ä–µ–∂–∏–º—É
    const handlePrepareForProduction = async () => {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—á–∏—Å—Ç–∏—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')) {
            setIsLoading(true)
            setMessage(null)

            try {
                const result = await prepareForProduction()

                if (result) {
                    setMessage({
                        text: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.',
                        type: 'success'
                    })
                } else {
                    setMessage({
                        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫ production.',
                        type: 'error'
                    })
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error)
                setMessage({
                    text: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
                    type: 'error'
                })
            } finally {
                setIsLoading(false)
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    const handleClearChats = async () => {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—á–∏—Å—Ç–∏—Ç –≤—Å–µ —á–∞—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞.')) {
            setIsLoading(true)
            setMessage(null)

            try {
                const result = await resetChatData()

                if (result) {
                    setMessage({
                        text: '–í—Å–µ —á–∞—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.',
                        type: 'success'
                    })
                } else {
                    setMessage({
                        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–æ–≤.',
                        type: 'error'
                    })
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error)
                setMessage({
                    text: `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
                    type: 'error'
                })
            } finally {
                setIsLoading(false)
            }
        }
    }

    return (
        <AdminGuard>
            <div className="max-w-3xl mx-auto p-4">
                <h1 className="text-2xl font-bold mb-6">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ production —Ä–µ–∂–∏–º–æ–º</h1>

                {message && (
                    <div className={`p-4 mb-6 rounded-md ${message.type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                        {message.text}
                    </div>
                )}

                <div className="grid gap-6">
                    <Card className="p-6 border bg-white shadow-md">
                        <h2 className="text-xl font-semibold mb-4">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ production</h2>
                        <p className="mb-4 text-gray-600">
                            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—á–∏—Å—Ç–∏—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                            –≤ production —Ä–µ–∂–∏–º–µ. –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.
                        </p>
                        <Button
                            onClick={handlePrepareForProduction}
                            isLoading={isLoading}
                            variant="primary"
                            className="mt-2"
                        >
                            <span className="mr-2">üöÄ</span> –ü–µ—Ä–µ–π—Ç–∏ –≤ production —Ä–µ–∂–∏–º
                        </Button>
                    </Card>

                    <Card className="p-6 border bg-white shadow-md">
                        <h2 className="text-xl font-semibold mb-4">–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–æ–≤</h2>
                        <p className="mb-4 text-gray-600">
                            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ—á–∏—Å—Ç–∏—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
                        </p>
                        <Button
                            onClick={handleClearChats}
                            isLoading={isLoading}
                            variant="secondary"
                            className="mt-2"
                        >
                            <span className="mr-2">üóëÔ∏è</span> –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–∞—Ç—ã
                        </Button>
                    </Card>
                </div>
            </div>
        </AdminGuard>
    )
}