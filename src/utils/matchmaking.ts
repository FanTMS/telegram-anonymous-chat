import { Chat } from './chat'
import { getCurrentUser, getUserById, User } from './user'
import { getInterestScore } from './interests'
import ChatEventManager from './chat-events'

// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∏—Å–∫–∞
interface SearchingUser {
  userId: string
  startedAt: number
  interests: string[]
  ageRange: [number, number]
  isRandomSearch: boolean
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
export interface ChatNotification {
  chatId: string
  otherUserId: string
  timestamp: number
  isRead: boolean
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–∏—Å–∫–∞
let searchingUsers: SearchingUser[] = []

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
let matchmakingServiceId: number | null = null
let timeoutIds: number[] = []

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (15 –º–∏–Ω—É—Ç)
const MAX_SEARCH_TIME = 15 * 60 * 1000

/**
 * –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
 */
export const startSearching = (
  isRandomSearch: boolean,
  interests: string[] = [],
  ageRange: [number, number] = [0, 100]
): boolean => {
  try {
    const user = getCurrentUser()
    if (!user) {
      console.error('[matchmaking] –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      return false
    }

    console.log(`[matchmaking] –ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è ${user.id}. –†–µ–∂–∏–º: ${isRandomSearch ? '—Å–ª—É—á–∞–π–Ω—ã–π' : '–ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º'}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ
    const existingIndex = searchingUsers.findIndex((item) => item.userId === user.id)
    if (existingIndex !== -1) {
      console.log(`[matchmaking] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ. –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...`)
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      searchingUsers[existingIndex] = {
        userId: user.id,
        startedAt: Date.now(),
        interests: [...interests],
        ageRange,
        isRandomSearch
      }
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–∞
      searchingUsers.push({
        userId: user.id,
        startedAt: Date.now(),
        interests: [...interests],
        ageRange,
        isRandomSearch
      })
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ localStorage
    localStorage.setItem(`searching_${user.id}`, 'true')

    console.log(`[matchmaking] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–∏—Å–∫. –í—Å–µ–≥–æ –≤ –ø–æ–∏—Å–∫–µ: ${searchingUsers.length}`)
    console.log(searchingUsers)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    triggerMatchmaking().then((found) => {
      if (found) console.log(`[matchmaking] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è ${user.id}!`)
    })

    return true
  } catch (error) {
    console.error('[matchmaking] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∏—Å–∫–∞:', error)
    return false
  }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const stopSearching = (userId?: string): boolean => {
  try {
    // –ï—Å–ª–∏ userId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userToStop = userId || (getCurrentUser()?.id)
    if (!userToStop) {
      console.error('[matchmaking] –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞')
      return false
    }

    console.log(`[matchmaking] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userToStop}`)

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞
    searchingUsers = searchingUsers.filter((user) => user.userId !== userToStop)

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞ –≤ localStorage
    localStorage.removeItem(`searching_${userToStop}`)

    console.log(`[matchmaking] –ü–æ–∏—Å–∫ –¥–ª—è ${userToStop} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –≤ –ø–æ–∏—Å–∫–µ: ${searchingUsers.length}`)
    return true
  } catch (error) {
    console.error('[matchmaking] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–∏—Å–∫–∞:', error)
    return false
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–æ–∏—Å–∫–µ
 */
export const isUserSearching = (userId: string): boolean => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const isSearching = searchingUsers.some((user) => user.userId === userId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –≤ localStorage
    const storedFlag = localStorage.getItem(`searching_${userId}`) === 'true'

    return isSearching || storedFlag
  } catch (error) {
    console.error('[matchmaking] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∏—Å–∫–∞:', error)
    return false
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–¥–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
 * @param intervalMs –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns ID —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
 */
export const startMatchmakingService = (intervalMs: number = 5000): number => {
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ—Ä–≤–∏—Å, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
  if (matchmakingServiceId) {
    stopMatchmakingService(matchmakingServiceId)
  }

  console.log(`[matchmaking] –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${intervalMs}ms`)

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  const serviceId = window.setInterval(() => {
    triggerMatchmaking()
  }, intervalMs)

  matchmakingServiceId = serviceId
  return serviceId
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–¥–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤
 */
export const stopMatchmakingService = (serviceId?: number): void => {
  const idToStop = serviceId || matchmakingServiceId

  if (idToStop) {
    console.log(`[matchmaking] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ ${idToStop}`)
    window.clearInterval(idToStop)

    if (serviceId === matchmakingServiceId) {
      matchmakingServiceId = null
    }
  }

  // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
  timeoutIds.forEach(id => window.clearTimeout(id))
  timeoutIds = []
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
 */
export const shouldContinueSearch = (userId: string): boolean => {
  const searchingUser = searchingUsers.find(u => u.userId === userId)
  if (!searchingUser) return false

  const now = Date.now()
  return (now - searchingUser.startedAt) < MAX_SEARCH_TIME
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ
 * @returns Promise<boolean> - true –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
 */
export const triggerMatchmaking = async (): Promise<boolean> => {
  try {
    if (searchingUsers.length < 2) {
      // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã
      return false
    }

    console.log(`[matchmaking] –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ: ${searchingUsers.length}`)

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
    searchingUsers = searchingUsers.filter(user => shouldContinueSearch(user.userId))

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–∏—Å–∫–µ
    for (let i = 0; i < searchingUsers.length; i++) {
      const user1 = searchingUsers[i]
      const currentUser = await getUserById(user1.userId)

      if (!currentUser) {
        console.warn(`[matchmaking] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user1.userId} –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`)
        continue
      }

      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–∞—Ä—É
      for (let j = 0; j < searchingUsers.length; j++) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (i === j) continue

        const user2 = searchingUsers[j]
        const otherUser = await getUserById(user2.userId)

        if (!otherUser) {
          console.warn(`[matchmaking] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user2.userId} –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`)
          continue
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        const compatible = checkCompatibility(user1, user2)

        if (compatible) {
          console.log(`[matchmaking] üéâ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–µ–∂–¥—É ${user1.userId} –∏ ${user2.userId}!`)

          // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
          const chatResult = await createChatForUsers(user1.userId, user2.userId)

          if (chatResult && chatResult.success) {
            // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–∞
            stopSearching(user1.userId)
            stopSearching(user2.userId)

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
            ChatEventManager.emitChatCreated(chatResult.chatId, [user1.userId, user2.userId])

            return true
          }
        }
      }
    }

    return false
  } catch (error) {
    console.error('[matchmaking] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:', error)
    return false
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
const checkCompatibility = (user1: SearchingUser, user2: SearchingUser): boolean => {
  // –ï—Å–ª–∏ –æ–±–∞ –∏—â—É—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ - –æ–Ω–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã
  if (user1.isRandomSearch && user2.isRandomSearch) {
    return true
  }

  // –ï—Å–ª–∏ –æ–¥–∏–Ω –∏—â–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ, –∞ –¥—Ä—É–≥–æ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º - –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã
  if (user1.isRandomSearch !== user2.isRandomSearch) {
    return false
  }

  // –û–±–∞ –∏—â—É—Ç –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
  if (user1.interests.length === 0 || user2.interests.length === 0) {
    return false
  }

  // –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
  const commonInterests = user1.interests.filter(interest =>
    user2.interests.includes(interest)
  )

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã
  return commonInterests.length > 0
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —á–∞—Ç –¥–ª—è –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
const createChatForUsers = async (userId1: string, userId2: string): Promise<{ success: boolean, chatId: string }> => {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const { createChat } = await import('./chat')

    // –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –æ–±–æ–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const chat = createChat([userId1, userId2])

    if (!chat) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç')
    }

    console.log(`[matchmaking] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç: ${chat.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${userId1} –∏ ${userId2}`)

    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    addChatNotification(userId1, chat.id, userId2)
    addChatNotification(userId2, chat.id, userId1)

    return { success: true, chatId: chat.id }
  } catch (error) {
    console.error('[matchmaking] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞:', error)
    return { success: false, chatId: '' }
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ
 */
export const getSearchingUsers = (): SearchingUser[] => {
  return searchingUsers
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
 */
const addChatNotification = (userId: string, chatId: string, otherUserId: string): void => {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    localStorage.setItem(`new_chat_flag_${userId}`, 'true')

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–∞—Ç–µ
    const notification: ChatNotification = {
      chatId,
      otherUserId,
      timestamp: Date.now(),
      isRead: false
    }

    localStorage.setItem(`new_chat_notification_${userId}`, JSON.stringify(notification))

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
    ChatEventManager.emitNewChatNotification(chatId, userId, otherUserId)

    console.log(`[matchmaking] –î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–∞—Ç–µ ${chatId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
  } catch (error) {
    console.error('[matchmaking] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —á–∞—Ç–µ:', error)
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const hasNewChat = (userId: string): boolean => {
  return localStorage.getItem(`new_chat_flag_${userId}`) === 'true'
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
 */
export const getNewChatNotification = (userId: string): ChatNotification | null => {
  try {
    const notification = localStorage.getItem(`new_chat_notification_${userId}`)
    return notification ? JSON.parse(notification) : null
  } catch (error) {
    console.error('[matchmaking] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —á–∞—Ç–µ:', error)
    return null
  }
}

/**
 * –ü–æ–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–∞—Ç–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
 */
export const markChatNotificationAsRead = (userId: string): void => {
  try {
    localStorage.removeItem(`new_chat_flag_${userId}`)

    const notificationKey = `new_chat_notification_${userId}`
    const notificationData = localStorage.getItem(notificationKey)

    if (notificationData) {
      const notification: ChatNotification = JSON.parse(notificationData)
      notification.isRead = true
      localStorage.setItem(notificationKey, JSON.stringify(notification))
    }
  } catch (error) {
    console.error('[matchmaking] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error)
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–ª–∞–¥–∫–∏
 */
export const createTestChat = async (userId: string, partnerName?: string): Promise<string | null> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUser = getCurrentUser()
    if (!currentUser) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è
    const testPartnerName = partnerName || `Test Partner ${Date.now().toString().slice(-4)}`

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testPartnerId = `test_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testPartner: User = {
      id: testPartnerId,
      name: testPartnerName,
      username: `test_${testPartnerName.toLowerCase().replace(/\s+/g, '_')}`,
      isAnonymous: true,
      interests: ['–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–û—Ç–ª–∞–¥–∫–∞'],
      rating: 5,
      createdAt: Date.now(),
      lastActive: Date.now()
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    localStorage.setItem(`user_${testPartnerId}`, JSON.stringify(testPartner))

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
    const { createChat } = await import('./chat')

    // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
    const chat = createChat([currentUser.id, testPartnerId])

    if (!chat) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç')
    }

    console.log(`[matchmaking] –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç: ${chat.id} —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º ${testPartnerName}`)

    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addChatNotification(currentUser.id, chat.id, testPartnerId)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
    ChatEventManager.emitChatCreated(chat.id, [currentUser.id, testPartnerId])

    return chat.id
  } catch (error) {
    console.error('[matchmaking] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞:', error)
    return null
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Ç –ø–æ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
 * @param chatId –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
 * @returns –û–±—ä–µ–∫—Ç —á–∞—Ç–∞ –∏–ª–∏ null, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
export const getChatById = (chatId: string): any | null => {
  try {
    const chatKey = `chat_${chatId}`;
    const chatData = localStorage.getItem(chatKey);
    if (!chatData) {
      return null;
    }
    return JSON.parse(chatData);
  } catch (error) {
    console.error('[matchmaking] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ –ø–æ ID:', error);
    return null;
  }
}

