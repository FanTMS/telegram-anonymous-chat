/**
 * –ú–æ–∫ –¥–ª—è Telegram WebApp API –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
 */

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const mockUser = {
    id: 123456789,
    first_name: "–õ–æ–∫–∞–ª—å–Ω—ã–π",
    last_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    username: "local_user",
    language_code: "ru",
    is_premium: true
};

// –ú–æ–∫ –¥–ª—è WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const mockInitData = "mock_init_data";

// –°–æ–∑–¥–∞–µ–º –º–æ–∫ WebApp API
export const createWebAppMock = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    const isLocalDevelopment =
        window.location.hostname === 'localhost' ||
        window.location.hostname === '127.0.0.1' ||
        window.location.hostname.includes('192.168.') ||
        process.env.NODE_ENV === 'development';

    // –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (!isLocalDevelopment) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram WebApp API 
    if (window.Telegram && window.Telegram.WebApp) {
        // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–∏–ø–∞–º–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ as any
        const realWebApp = window.Telegram.WebApp as any;
        if (!realWebApp.initData) {
            console.log('Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç initData. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ.');
            realWebApp.initData = '';
        }
        console.log('WebApp —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –Ω–µ —Å–æ–∑–¥–∞–µ–º –º–æ–∫');
        return;
    }

    console.info('üì± –°–æ–∑–¥–∞–µ–º –º–æ–∫ Telegram WebApp API –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç
    const MockWebApp = {
        isExpanded: true,
        initData: mockInitData,
        initDataUnsafe: {
            user: mockUser,
            query_id: "mock_query_id",
            auth_date: Math.floor(Date.now() / 1000)
        },
        colorScheme: 'light',
        ready: () => console.log('WebApp.ready() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)'),
        expand: () => console.log('WebApp.expand() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)'),
        close: () => console.log('WebApp.close() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)'),
        showAlert: (message: string) => {
            console.log(`WebApp.showAlert() –≤—ã–∑–≤–∞–Ω (–º–æ–∫): ${message}`);
            alert(message);
        },
        showPopup: (params: any, callback: any = null) => {
            console.log(`WebApp.showPopup() –≤—ã–∑–≤–∞–Ω (–º–æ–∫):`, params);
            alert(params.message || '–°–æ–æ–±—â–µ–Ω–∏–µ WebApp');
            if (callback) callback('ok');
        },
        MainButton: {
            text: 'MAIN BUTTON',
            color: '#3390ec',
            textColor: '#ffffff',
            isVisible: false,
            isActive: true,
            isProgressVisible: false,
            setText: (text: string) => {
                console.log(`MainButton.setText() –≤—ã–∑–≤–∞–Ω (–º–æ–∫): ${text}`);
                MockWebApp.MainButton.text = text;
                return MockWebApp.MainButton;
            },
            show: () => {
                console.log('MainButton.show() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)');
                MockWebApp.MainButton.isVisible = true;
                return MockWebApp.MainButton;
            },
            hide: () => {
                console.log('MainButton.hide() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)');
                MockWebApp.MainButton.isVisible = false;
                return MockWebApp.MainButton;
            },
            onClick: (callback: () => void) => {
                console.log('MainButton.onClick() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)');
                return MockWebApp.MainButton;
            },
            offClick: (callback: () => void) => {
                console.log('MainButton.offClick() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)');
                return MockWebApp.MainButton;
            },
            showProgress: () => {
                console.log('MainButton.showProgress() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)');
                MockWebApp.MainButton.isProgressVisible = true;
                return MockWebApp.MainButton;
            },
            hideProgress: () => {
                console.log('MainButton.hideProgress() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)');
                MockWebApp.MainButton.isProgressVisible = false;
                return MockWebApp.MainButton;
            }
        },
        BackButton: {
            isVisible: false,
            show: () => {
                console.log('BackButton.show() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)');
                MockWebApp.BackButton.isVisible = true;
                return MockWebApp.BackButton;
            },
            hide: () => {
                console.log('BackButton.hide() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)');
                MockWebApp.BackButton.isVisible = false;
                return MockWebApp.BackButton;
            },
            onClick: (callback: () => void) => {
                console.log('BackButton.onClick() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)');
                return MockWebApp.BackButton;
            },
            offClick: (callback: () => void) => {
                console.log('BackButton.offClick() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)');
                return MockWebApp.BackButton;
            }
        },
        HapticFeedback: {
            impactOccurred: (style: string) => console.log(`HapticFeedback.impactOccurred() –≤—ã–∑–≤–∞–Ω (–º–æ–∫): ${style}`),
            notificationOccurred: (type: string) => console.log(`HapticFeedback.notificationOccurred() –≤—ã–∑–≤–∞–Ω (–º–æ–∫): ${type}`),
            selectionChanged: () => console.log('HapticFeedback.selectionChanged() –≤—ã–∑–≤–∞–Ω (–º–æ–∫)'),
        },
        version: '6.0'
    };

    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Telegram, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!window.Telegram) {
        (window as any).Telegram = {};
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–∫ WebApp
    (window as any).Telegram.WebApp = MockWebApp;

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
    window.addEventListener('error', function (event) {
        console.error('–û—à–∏–±–∫–∞ –≤ Telegram WebApp Mock:', event.error);
    });

    return MockWebApp;
};
